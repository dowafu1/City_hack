import logging
import os
from datetime import datetime
from telegram import (
  Update, ReplyKeyboardMarkup, KeyboardButton,
  InlineKeyboardButton, InlineKeyboardMarkup
)
from telegram.ext import (
  Application, CommandHandler, CallbackQueryHandler,
  MessageHandler, ContextTypes, filters
)
import psycopg2
from psycopg2.extras import RealDictCursor
from dotenv import load_dotenv
from functools import wraps

# ==============================
# üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
# ==============================
load_dotenv()

logging.basicConfig(
  format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
  level=logging.INFO,
)

BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_IDS = list(map(int, os.getenv("ADMIN_IDS", "").split(","))) if os.getenv("ADMIN_IDS") else []
DATABASE_URL = os.getenv("DATABASE_URL")

# ==============================
# ‚å®Ô∏è –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
# ==============================
main_keyboard = ReplyKeyboardMarkup(
  [
    [KeyboardButton("–ú–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å")],
    [KeyboardButton("–¢—Ä–µ–≤–æ–∂–Ω–∞—è –∫–Ω–æ–ø–∫–∞")],
    [KeyboardButton("–ö–æ–Ω—Ç–∞–∫—Ç—ã")],
  ],
  resize_keyboard=True
)

problems_keyboard = InlineKeyboardMarkup([
  [InlineKeyboardButton("–¢—Ä–µ–≤–æ–≥–∞ –∏ –ø–∞–Ω–∏—á–µ—Å–∫–∏–µ –∞—Ç–∞–∫–∏", callback_data="problem_anxiety")],
  [InlineKeyboardButton("–î–µ–ø—Ä–µ—Å—Å–∏—è –∏ —É–Ω—ã–Ω–∏–µ", callback_data="problem_depression")],
  [InlineKeyboardButton("–°—Ç—Ä–µ—Å—Å –∏ –≤—ã–≥–æ—Ä–∞–Ω–∏–µ", callback_data="problem_stress")],
  [InlineKeyboardButton("–ü—Ä–æ–±–ª–µ–º—ã –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö", callback_data="problem_relationships")],
  [InlineKeyboardButton("–°–∞–º–æ–æ—Ü–µ–Ω–∫–∞ –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", callback_data="problem_self_esteem")],
  [InlineKeyboardButton("–î—Ä—É–≥–∞—è –ø—Ä–æ–±–ª–µ–º–∞", callback_data="problem_other")],
])

contacts = {
  "–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å": "8-800-2000-122",
  "–¢–µ–ª–µ—Ñ–æ–Ω –¥–æ–≤–µ—Ä–∏—è": "8-495-625-06-20",
  "–ö—Ä–∏–∑–∏—Å–Ω–∞—è –ª–∏–Ω–∏—è": "8-800-333-44-34",
  "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞": "8-499-173-09-09",
  "–¶–µ–Ω—Ç—Ä —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –ø–æ–º–æ—â–∏": "8-499-791-20-50",
}


# ==============================
# üóÑ –†–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
# ==============================
def with_db(func):
  """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è/–∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""

  @wraps(func)
  def wrapper(*args, **kwargs):
    conn = psycopg2.connect(DATABASE_URL)
    try:
      result = func(conn, *args, **kwargs)
      conn.commit()
      return result
    except Exception as e:
      logging.error(f"DB Error in {func.__name__}: {e}")
    finally:
      conn.close()

  return wrapper


@with_db
def init_database(conn):
  with conn.cursor() as cur:
    cur.execute("""
            CREATE TABLE IF NOT EXISTS users (
                id SERIAL PRIMARY KEY,
                telegram_id BIGINT UNIQUE NOT NULL,
                username VARCHAR(100),
                first_name VARCHAR(100),
                last_name VARCHAR(100),
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
    cur.execute("""
            CREATE TABLE IF NOT EXISTS help_requests (
                id SERIAL PRIMARY KEY,
                user_id INTEGER REFERENCES users(id),
                problem_type VARCHAR(100),
                description TEXT,
                status VARCHAR(50) DEFAULT 'new',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
    cur.execute("""
            CREATE TABLE IF NOT EXISTS emergency_requests (
                id SERIAL PRIMARY KEY,
                user_id INTEGER REFERENCES users(id),
                description TEXT,
                status VARCHAR(50) DEFAULT 'new',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
    cur.execute("""
            CREATE TABLE IF NOT EXISTS chats (
                id SERIAL PRIMARY KEY,
                user_id INTEGER REFERENCES users(id),
                message TEXT,
                is_bot BOOLEAN DEFAULT FALSE,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)


@with_db
def save_user(conn, user_data):
  with conn.cursor() as cur:
    cur.execute("""
            INSERT INTO users (telegram_id, username, first_name, last_name)
            VALUES (%s, %s, %s, %s)
            ON CONFLICT (telegram_id) DO UPDATE SET
                username = EXCLUDED.username,
                first_name = EXCLUDED.first_name,
                last_name = EXCLUDED.last_name
            RETURNING id
        """, (user_data.id, user_data.username, user_data.first_name, user_data.last_name))
    return cur.fetchone()[0]


# –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ: save_help_request, save_emergency_request, save_chat_message, get_stats, update_request_status
# (–∏—Ö –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ —É —Ç–µ–±—è, —Ç–æ–ª—å–∫–æ –æ–±–µ—Ä–Ω—É—Ç—å –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–º @with_db)

# ==============================
# ü§ñ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
# ==============================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
  user = update.message.from_user
  save_user(user)
  await update.message.reply_text(
    f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}! –Ø –±–æ—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
    reply_markup=main_keyboard
  )


async def show_problems(update: Update, context: ContextTypes.DEFAULT_TYPE):
  await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤–∞—Å –±–µ—Å–ø–æ–∫–æ–∏—Ç:", reply_markup=problems_keyboard)


async def show_contacts(update: Update, context: ContextTypes.DEFAULT_TYPE):
  contact_list = "\n".join([f"‚Ä¢ {k}: {v}" for k, v in contacts.items()])
  await update.message.reply_text(
    f"üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –ø–æ–º–æ—â–∏:\n\n{contact_list}",
    reply_markup=main_keyboard
  )


# ==============================
# üöÄ –ó–∞–ø—É—Å–∫
# ==============================
def main():
  init_database()

  app = Application.builder().token(BOT_TOKEN).build()
  app.add_handler(CommandHandler("start", start))
  app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, show_problems))  # –ø—Ä–∏–º–µ—Ä
  app.run_polling()


if __name__ == "__main__":
  main()
