import os
import re
import asyncio
from datetime import timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton, \
  ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.dispatcher.middlewares.base import BaseMiddleware
from aiogram.client.default import DefaultBotProperties
from aiogram.exceptions import TelegramBadRequest

from db import (
  init_db, log_action, get_role, set_role, add_chat_message,
  get_articles, get_contacts, get_sos, get_events, get_tip, save_question,
  upsert_contact, upsert_sos, upsert_event, upsert_article, upsert_tip,
  get_due_subscribers, reset_subscriptions, toggle_subscription
)

# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
from dotenv import load_dotenv

dotenv_path = os.path.join(os.path.dirname(__file__), ".env")
if not os.path.exists(dotenv_path):
  print(f"‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {dotenv_path}")
  exit(1)

load_dotenv(dotenv_path)
print(f"‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑: {dotenv_path}")

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
WELCOME_TEXT = (
    "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî *–¶–∏—Ñ—Ä–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫* –¶–µ–Ω—Ç—Ä–∞ –º–æ–ª–æ–¥–µ–∂–Ω–æ–π –ø–æ–ª–∏—Ç–∏–∫–∏ –¢–æ–º—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏.\n\n"
    "üîπ –ï—Å–ª–∏ —Ç—ã –≤ *–æ—Å—Ç—Ä–æ–π –∏–ª–∏ —É–≥—Ä–æ–∂–∞—é—â–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏* ‚Äî —Å—Ä–∞–∑—É –Ω–∞–∂–º–∏ **¬´üö® –¢—Ä–µ–≤–æ–∂–Ω–∞—è –∫–Ω–æ–ø–∫–∞¬ª**.\n"
    "–¢—ã –ø–æ–ª—É—á–∏—à—å —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏ —Å–º–æ–∂–µ—à—å –∞–Ω–æ–Ω–∏–º–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å ‚Äî —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π.\n\n"
    "üîπ –ï—Å–ª–∏ –≤—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ ‚Äî –≤—ã–±–µ—Ä–∏, –∫—Ç–æ —Ç—ã:\n"
    "‚Ä¢ *–Ø –ø–æ–¥—Ä–æ—Å—Ç–æ–∫* ‚Äî –ø–æ–¥–¥–µ—Ä–∂–∫–∞, —Å–æ–≤–µ—Ç—ã, –ø–æ–Ω–∏–º–∞–Ω–∏–µ\n"
    "‚Ä¢ *–Ø –≤–∑—Ä–æ—Å–ª—ã–π* ‚Äî —Ä–µ—Å—É—Ä—Å—ã –∏ –ø–æ–º–æ—â—å\n\n"
    "–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –æ—Ç–∫—Ä–æ—é—Ç—Å—è —Ä–∞–∑–¥–µ–ª—ã –ø–æ–º–æ—â–∏, –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –∏ —Å–≤—è–∑–∏ —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º–∏.\n\n"
    "–í—ã–±–µ—Ä–∏, —á—Ç–æ –ø–æ–¥—Ö–æ–¥–∏—Ç —Ç–µ–±–µ —Å–µ–π—á–∞—Å:"
)

INFO_TEXT = (
    "üß† *–ß–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å?*\n\n"
    "–í—ã–±–∏—Ä–∞–π, —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ ‚Äî —è —Ä—è–¥–æ–º:\n\n"

    "üÜò *–¢—Ä–µ–≤–æ–∂–Ω–∞—è –∫–Ω–æ–ø–∫–∞*\n"
    "–ï—Å–ª–∏ —Ç—ã –≤ –æ–ø–∞—Å–Ω–æ—Å—Ç–∏ ‚Äî –ø–æ–ª—É—á–∏ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –º–≥–Ω–æ–≤–µ–Ω–Ω–æ.\n\n"

    "üß≠ *–ú–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å*\n"
    "–ü–æ—à–∞–≥–æ–≤–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞: —á—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ —Ç—Ä–µ–≤–æ–∂–Ω–æ, —Å—Ç—Ä–∞—à–Ω–æ –∏–ª–∏ —Ç—è–∂–µ–ª–æ.\n\n"
    
    "ü§ñ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ (—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ò–ò)\n"
    "–ü–æ–ª—É—á–∏ —Å–æ–≤–µ—Ç, –ø—Ä–µ–∂–¥–µ —á–µ–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É\n\n"
    
    "üìû *–ö—É–¥–∞ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è?*\n"
    "–ì–æ—Ä—è—á–∏–µ –ª–∏–Ω–∏–∏, –ø—Å–∏—Ö–æ–ª–æ–≥–∏, —é—Ä–∏—Å—Ç—ã ‚Äî –∫–æ–Ω—Ç–∞–∫—Ç—ã —Å–ª—É–∂–± –ø–æ–¥–¥–µ—Ä–∂–∫–∏.\n\n"

    "‚ùì *–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å*\n"
    "–ê–Ω–æ–Ω–∏–º–Ω–æ –Ω–∞–ø–∏—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É ‚Äî —è –ø–µ—Ä–µ–¥–∞–º –∏ –ø–æ–º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç.\n\n"

    "üìÖ *–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è*\n"
    "–ß–µ–º –∑–∞–Ω—è—Ç—å—Å—è: –∞—Ñ–∏—à–∞ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –º–æ–ª–æ–¥—ë–∂–∏ –æ—Ç –¶–ú–ü –∏ –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤.\n\n"

    "üí° *–ü–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç*\n"
    "–¢—ë–ø–ª—ã–π —Å–æ–≤–µ—Ç –¥–Ω—è ‚Äî —á—Ç–æ–±—ã –±—ã–ª–æ —á—É—Ç—å –ª–µ–≥—á–µ.\n\n"

    "üîî *–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É*\n"
    "–ü–æ–ª—É—á–∞–π –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ —Å–æ–≤–µ—Ç—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Å—Ç–∞–≤–∞–π—Å—è –Ω–∞ —Å–≤—è–∑–∏.\n\n"

    "üîÑ *–ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å*\n"
    "–°–º–µ–Ω–∏ —Ä–æ–ª—å (–ø–æ–¥—Ä–æ—Å—Ç–æ–∫ / –≤–∑—Ä–æ—Å–ª—ã–π), —á—Ç–æ–±—ã —è –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞–ª, –∫–∞–∫ –ø–æ–º–æ—á—å.\n\n"

    "–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å? –í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω–æ–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:"
)

BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
  print("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞ –≤ .env")
  exit(1)

ADMIN_IDS = {int(x) for x in os.getenv("ADMIN_IDS", "123456789").split(',') if x.strip()}
PHONE_RX = re.compile(r"^\+7\(\d{3}\)\d{3}-\d{2}-\d{2}$")

bot = Bot(BOT_TOKEN, default=DefaultBotProperties(parse_mode="Markdown"))
dp = Dispatcher(storage=MemoryStorage())


# === Middleware: –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã ===
class ThrottlingMiddleware(BaseMiddleware):
  def __init__(self, rate_limit=10):
    self.rate_limit = rate_limit
    self.last_call = {}

  async def __call__(self, handler, event, data):
    user_id = event.from_user.id
    now = asyncio.get_event_loop().time()
    last = self.last_call.get(user_id, 0)
    if now - last < 1 / self.rate_limit:
      return
    self.last_call[user_id] = now
    return await handler(event, data)


dp.message.middleware(ThrottlingMiddleware())


# === FSM ===
class RoleForm(StatesGroup):
  role = State()


class QuestionForm(StatesGroup):
  question = State()


class AdminForm(StatesGroup):
  section = State()
  payload = State()


# === –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Äî –≤ –ø–æ—Ä—è–¥–∫–µ, –∫–∞–∫ –≤ INFO_TEXT ===
def main_menu(user_id: int) -> InlineKeyboardMarkup:
  buttons = [
    [InlineKeyboardButton(text="üÜò –¢—Ä–µ–≤–æ–∂–Ω–∞—è –∫–Ω–æ–ø–∫–∞", callback_data="sos")],
    [InlineKeyboardButton(text="üß≠ –ú–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å", callback_data="navigator")],
    [InlineKeyboardButton(text="ü§ñ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ (—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ò–ò)", callback_data="ai_support")],
    [InlineKeyboardButton(text="üìû –ö—É–¥–∞ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è?", callback_data="contacts")],
    [InlineKeyboardButton(text="‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="question")],
    [InlineKeyboardButton(text="üìÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", callback_data="events")],
    [InlineKeyboardButton(text="üí° –ü–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç", callback_data="tip")],
    [InlineKeyboardButton(text="üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É", callback_data="sub")],
    [InlineKeyboardButton(text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å", callback_data="change_role")]
  ]
  if user_id in ADMIN_IDS:
    buttons.append([InlineKeyboardButton(text="üõ†Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin")])
  return InlineKeyboardMarkup(inline_keyboard=buttons)


# === –ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é ===
async def show_main(obj, edit=True, greeting=False):
  text = INFO_TEXT if greeting else "–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"
  markup = main_menu(obj.from_user.id)
  if edit:
    try:
      await obj.message.edit_text(text=text, reply_markup=markup)
    except TelegramBadRequest as e:
      if "message is not modified" in str(e):
        return
      raise
  else:
    await obj.answer(text=text, reply_markup=markup)


# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ===
@dp.message(Command("start"))
async def start(m: types.Message, state: FSMContext):
  await log_action(m.from_user.id, "start")
  role = await get_role(m.from_user.id)

  # –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è —Ç—Ä–µ–≤–æ–∂–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –≤–Ω–∏–∑—É
  kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="üö® –¢—Ä–µ–≤–æ–∂–Ω–∞—è –∫–Ω–æ–ø–∫–∞")]],
    resize_keyboard=True,
    one_time_keyboard=False
  )

  if not role:
    kb.keyboard.append([KeyboardButton(text="–Ø –ø–æ–¥—Ä–æ—Å—Ç–æ–∫"), KeyboardButton(text="–Ø –≤–∑—Ä–æ—Å–ª—ã–π")])
    await m.answer(WELCOME_TEXT, reply_markup=kb)
    await state.set_state(RoleForm.role)
  else:
    await m.answer(INFO_TEXT, reply_markup=kb)
    await show_main(m, edit=False, greeting=False)


@dp.message(RoleForm.role)
async def choose_role(m: types.Message, state: FSMContext):
  text = m.text.strip().lower()

  if "—Ç—Ä–µ–≤–æ–∂–Ω–∞—è –∫–Ω–æ–ø–∫–∞" in text or "üö®" in text:
    await state.clear()
    await sos(types.CallbackQuery(
      id="temp",
      from_user=m.from_user,
      chat_instance="temp",
      message=m,
      data="sos"
    ))
    return

  role = "teen" if "–ø–æ–¥—Ä–æ—Å—Ç–æ–∫" in text else "adult"
  await set_role(m.from_user.id, role)
  await state.clear()

  kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="üö® –¢—Ä–µ–≤–æ–∂–Ω–∞—è –∫–Ω–æ–ø–∫–∞")]],
    resize_keyboard=True,
    one_time_keyboard=False
  )
  await m.reply("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä. –Ø —É—á—Ç—É —ç—Ç–æ, —á—Ç–æ–±—ã –ª—É—á—à–µ –ø–æ–º–æ–≥–∞—Ç—å.", reply_markup=kb)
  await m.answer(INFO_TEXT, reply_markup=kb)
  await show_main(m, edit=False, greeting=False)


@dp.callback_query(F.data == "change_role")
async def change_role(c: types.CallbackQuery, state: FSMContext):
  await log_action(c.from_user.id, "change_role")
  await c.message.delete()

  kb = ReplyKeyboardMarkup(
    keyboard=[
      [KeyboardButton(text="–Ø –ø–æ–¥—Ä–æ—Å—Ç–æ–∫"), KeyboardButton(text="–Ø –≤–∑—Ä–æ—Å–ª—ã–π")],
      [KeyboardButton(text="üö® –¢—Ä–µ–≤–æ–∂–Ω–∞—è –∫–Ω–æ–ø–∫–∞")]
    ],
    resize_keyboard=True,
    one_time_keyboard=False
  )
  await c.message.answer("–ö—Ç–æ —Ç—ã? –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ –ª—É—á—à–µ –ø–æ–º–æ–≥–∞—Ç—å —Ç–µ–±–µ.", reply_markup=kb)
  await state.set_state(RoleForm.role)


# === –ù–∞–≤–∏–≥–∞—Ç–æ—Ä –ø–æ–º–æ—â–∏: –≤—ã–±–æ—Ä –∫–ª–∞—Å—Ç–µ—Ä–∞ ===
@dp.callback_query(F.data == "navigator")
async def navigator(c: types.CallbackQuery):
  await log_action(c.from_user.id, "navigator")
  await add_chat_message(c.message.chat.id, "user", "navigator")

  kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üòî –î–µ–ø—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è", callback_data="cluster_1")],
    [InlineKeyboardButton(text="‚ö†Ô∏è –°—É–∏—Ü–∏–¥–∞–ª—å–Ω—ã–µ –º—ã—Å–ª–∏", callback_data="cluster_2")],
    [InlineKeyboardButton(text="üí¢ –ê–≥—Ä–µ—Å—Å–∏—è –∏ —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ", callback_data="cluster_3")],
    [InlineKeyboardButton(text="üçΩÔ∏è –ü—Ä–æ–±–ª–µ–º—ã —Å –µ–¥–æ–π", callback_data="cluster_4")],
    [InlineKeyboardButton(text="ü´Ç –ü–æ–ª–æ–≤–æ–µ –≤–æ—Å–ø–∏—Ç–∞–Ω–∏–µ", callback_data="cluster_5")],
    [InlineKeyboardButton(text="üë• –°–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤ –æ–±—â–µ–Ω–∏–∏", callback_data="cluster_6")],
    [InlineKeyboardButton(text="üí¨ –î—Ä—É–≥–æ–µ ‚Äî —Ö–æ—á—É –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å", callback_data="ai_support")],
    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]
  ])

  await c.message.edit_text(
    "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±—è –±–µ—Å–ø–æ–∫–æ–∏—Ç. –¢—ã –Ω–µ –æ–±—è–∑–∞–Ω –≤—Å—ë —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å ‚Äî –ø—Ä–æ—Å—Ç–æ —É–∫–∞–∂–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.\n\n"
    "–Ø –ø–æ–º–æ–≥—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è, –ø–æ–¥—Å–∫–∞–∂—É, –≥–¥–µ –∏—Å–∫–∞—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É, –∏ –±—É–¥—É —Ä—è–¥–æ–º, –¥–∞–∂–µ –µ—Å–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ö–æ—á–µ—Ç—Å—è –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å.",
    reply_markup=kb
  )


# === –ö–ª–∞—Å—Ç–µ—Ä 1: –î–µ–ø—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è ===
@dp.callback_query(F.data == "cluster_1")
async def cluster_1(c: types.CallbackQuery):
  await log_action(c.from_user.id, "cluster_1")
  await add_chat_message(c.message.chat.id, "ai", "cluster_1_response")

  text = (
    "üòî *–î–µ–ø—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è*\n\n"
    "–¢—ã –Ω–µ –æ–¥–∏–Ω. –ú–Ω–æ–≥–∏–µ —Å—Ç–∞–ª–∫–∏–≤–∞—é—Ç—Å—è —Å —á—É–≤—Å—Ç–≤–æ–º –ø—É—Å—Ç–æ—Ç—ã, —É—Å—Ç–∞–ª–æ—Å—Ç–∏, –ø–æ—Ç–µ—Ä–µ–π –∏–Ω—Ç–µ—Ä–µ—Å–∞ –∫ –∂–∏–∑–Ω–∏.\n\n"
    "–≠—Ç–æ –Ω–µ —Å–ª–∞–±–æ—Å—Ç—å. –≠—Ç–æ —Å–∏–≥–Ω–∞–ª, —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞.\n\n"
    "–ß—Ç–æ –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å:\n"
    "‚Äî –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –ø—Å–∏—Ö–æ–ª–æ–≥–æ–º\n"
    "‚Äî –ó–∞–ø–∏—Å–∞—Ç—å, —á—Ç–æ —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å\n"
    "‚Äî –ù–µ —Ç—Ä–µ–±–æ–≤–∞—Ç—å –æ—Ç —Å–µ–±—è ¬´–±—ã—Ç—å —Å–∏–ª—å–Ω—ã–º¬ª\n\n"
    "–•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å, –≥–¥–µ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å? –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å ‚Äî —è –∑–¥–µ—Å—å."
  )

  kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üìû –ö—É–¥–∞ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è?", callback_data="contacts")],
    [InlineKeyboardButton(text="üí¨ –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å (–ò–ò-–ø–æ–¥–¥–µ—Ä–∂–∫–∞)", callback_data="ai_support")],
    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="navigator")]
  ])
  await c.message.edit_text(text=text, reply_markup=kb)


# === –ö–ª–∞—Å—Ç–µ—Ä 2: –°—É–∏—Ü–∏–¥–∞–ª—å–Ω—ã–µ –º—ã—Å–ª–∏ ===
@dp.callback_query(F.data == "cluster_2")
async def cluster_2(c: types.CallbackQuery):
  await log_action(c.from_user.id, "cluster_2")
  await add_chat_message(c.message.chat.id, "ai", "cluster_2_response")

  text = (
    "‚ö†Ô∏è *–°—É–∏—Ü–∏–¥–∞–ª—å–Ω—ã–µ –º—ã—Å–ª–∏*\n\n"
    "–ï—Å–ª–∏ —Ç—ã —Å–µ–π—á–∞—Å —á—É–≤—Å—Ç–≤—É–µ—à—å, —á—Ç–æ –Ω–µ —Å–ø—Ä–∞–≤–ª—è–µ—à—å—Å—è ‚Äî —ç—Ç–æ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ.\n\n"
    "–¢—ã –Ω–µ –æ–±—è–∑–∞–Ω –Ω–µ—Å—Ç–∏ —ç—Ç–æ –≤ –æ–¥–∏–Ω–æ—á–∫—É. –ï—Å—Ç—å –ª—é–¥–∏, –∫–æ—Ç–æ—Ä—ã–º –º–æ–∂–Ω–æ –ø–æ–∑–≤–æ–Ω–∏—Ç—å *–ø—Ä—è–º–æ —Å–µ–π—á–∞—Å*.\n\n"
    "–¢—ã –≤–∞–∂–µ–Ω. –ú–∏—Ä –Ω–µ —Å—Ç–∞–Ω–µ—Ç –ª—É—á—à–µ –±–µ–∑ —Ç–µ–±—è.\n\n"
    "–î–∞–≤–∞–π –Ω–∞–π–¥—ë–º, –∫—Ç–æ —Å–º–æ–∂–µ—Ç –ø–æ–º–æ—á—å ‚Äî –¥–∞–∂–µ –µ—Å–ª–∏ —Ç—ã –ø—Ä–æ—Å—Ç–æ —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã –∫—Ç–æ-—Ç–æ –≤—ã—Å–ª—É—à–∞–ª."
  )

  kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üÜò –¢—Ä–µ–≤–æ–∂–Ω–∞—è –∫–Ω–æ–ø–∫–∞", callback_data="sos")],
    [InlineKeyboardButton(text="üìû –ì–æ—Ä—è—á–∏–µ –ª–∏–Ω–∏–∏", callback_data="contacts")],
    [InlineKeyboardButton(text="üí¨ –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å (–ò–ò-–ø–æ–¥–¥–µ—Ä–∂–∫–∞)", callback_data="ai_support")],
    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="navigator")]
  ])
  await c.message.edit_text(text=text, reply_markup=kb)


# === –ö–ª–∞—Å—Ç–µ—Ä 3: –ê–≥—Ä–µ—Å—Å–∏—è –∏ —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ ===
@dp.callback_query(F.data == "cluster_3")
async def cluster_3(c: types.CallbackQuery):
  await log_action(c.from_user.id, "cluster_3")
  await add_chat_message(c.message.chat.id, "ai", "cluster_3_response")

  text = (
    "üí¢ *–ê–≥—Ä–µ—Å—Å–∏—è –∏ —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ*\n\n"
    "–ò–Ω–æ–≥–¥–∞ –∑–ª–æ—Å—Ç—å –Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ—Ç—Å—è ‚Äî –∏–∑-–∑–∞ —Å—Ç—Ä–µ—Å—Å–∞, –¥–∞–≤–ª–µ–Ω–∏—è, —á—É–≤—Å—Ç–≤–∞ –Ω–µ—Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç–∏.\n\n"
    "–≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ ‚Äî –∏—Å–ø—ã—Ç—ã–≤–∞—Ç—å —Å–∏–ª—å–Ω—ã–µ —ç–º–æ—Ü–∏–∏. –í–∞–∂–Ω–æ –Ω–µ –¥–∞—Ç—å –∏–º –ø—Ä–∏—á–∏–Ω–∏—Ç—å –≤—Ä–µ–¥ —Ç–µ–±–µ –∏–ª–∏ –¥—Ä—É–≥–∏–º.\n\n"
    "–ú—ã –º–æ–∂–µ–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è:\n"
    "‚Äî –ß—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç –≤—Å–ø—ã—à–∫–∏?\n"
    "‚Äî –ö–∞–∫ —Å–ø—Ä–∞–≤–ª—è—Ç—å—Å—è, –Ω–µ –Ω–∞–≤—Ä–µ–¥–∏–≤ —Å–µ–±–µ?\n"
    "‚Äî –ì–¥–µ –Ω–∞–π—Ç–∏ –ø–æ–¥–¥–µ—Ä–∂–∫—É?"
  )

  kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üß† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç–º–æ—Ü–∏—è–º–∏", callback_data="help_me")],
    [InlineKeyboardButton(text="üí¨ –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å (–ò–ò-–ø–æ–¥–¥–µ—Ä–∂–∫–∞)", callback_data="ai_support")],
    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="navigator")]
  ])
  await c.message.edit_text(text=text, reply_markup=kb)


# === –ö–ª–∞—Å—Ç–µ—Ä 4: –ü—Ä–æ–±–ª–µ–º—ã —Å –µ–¥–æ–π ===
@dp.callback_query(F.data == "cluster_4")
async def cluster_4(c: types.CallbackQuery):
  await log_action(c.from_user.id, "cluster_4")
  await add_chat_message(c.message.chat.id, "ai", "cluster_4_response")

  text = (
    "üçΩÔ∏è *–ü—Ä–æ–±–ª–µ–º—ã —Å –µ–¥–æ–π*\n\n"
    "–û—Ç–Ω–æ—à–µ–Ω–∏—è —Å –µ–¥–æ–π –º–æ–≥—É—Ç –±—ã—Ç—å —Å–ª–æ–∂–Ω—ã–º–∏: –ø–µ—Ä–µ–µ–¥–∞–Ω–∏–µ, –æ—Ç–∫–∞–∑ –æ—Ç –ø–∏—â–∏, —á—É–≤—Å—Ç–≤–æ –≤–∏–Ω—ã –ø–æ—Å–ª–µ –µ–¥—ã.\n\n"
    "–≠—Ç–æ –Ω–µ –ø—Ä–æ ¬´—Å–ª–∞–±—É—é –≤–æ–ª—é¬ª ‚Äî —ç—Ç–æ —Å–∏–≥–Ω–∞–ª, —á—Ç–æ —Å —Ç–æ–±–æ–π —á—Ç–æ-—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç.\n\n"
    "–¢—ã –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—à—å –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –î–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä—ë–º—Å—è, –∫–∞–∫ –Ω–∞—á–∞—Ç—å –∑–∞–±–æ—Ç–∏—Ç—å—Å—è –æ —Å–µ–±–µ ‚Äî –±–µ–∑ –æ—Å—É–∂–¥–µ–Ω–∏—è."
  )

  kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üìû –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –ø–æ –ü–ü–ü", callback_data="contacts")],
    [InlineKeyboardButton(text="üí¨ –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å (–ò–ò-–ø–æ–¥–¥–µ—Ä–∂–∫–∞)", callback_data="ai_support")],
    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="navigator")]
  ])
  await c.message.edit_text(text=text, reply_markup=kb)


# === –ö–ª–∞—Å—Ç–µ—Ä 5: –ü–æ–ª–æ–≤–æ–µ –≤–æ—Å–ø–∏—Ç–∞–Ω–∏–µ ===
@dp.callback_query(F.data == "cluster_5")
async def cluster_5(c: types.CallbackQuery):
  await log_action(c.from_user.id, "cluster_5")
  await add_chat_message(c.message.chat.id, "ai", "cluster_5_response")

  text = (
    "ü´Ç *–ü–æ–ª–æ–≤–æ–µ –≤–æ—Å–ø–∏—Ç–∞–Ω–∏–µ*\n\n"
    "–í–æ–ø—Ä–æ—Å—ã –æ —Ç–µ–ª–µ, –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö, —Å–µ–∫—Å—É–∞–ª—å–Ω–æ—Å—Ç–∏ ‚Äî —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ.\n\n"
    "–¢—ã –∏–º–µ–µ—à—å –ø—Ä–∞–≤–æ –∑–Ω–∞—Ç—å, –∫–∞–∫ —É—Å—Ç—Ä–æ–µ–Ω —Ç–≤–æ–π –æ—Ä–≥–∞–Ω–∏–∑–º, –∫–∞–∫ –∑–∞—â–∏—â–∞—Ç—å —Å–µ–±—è –∏ —Å–≤–æ–∏ –≥—Ä–∞–Ω–∏—Ü—ã.\n\n"
    "–ó–¥–µ—Å—å –Ω–µ—Ç –≥–ª—É–ø—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤. –°–ø—Ä–∞—à–∏–≤–∞–π ‚Äî –ø–æ–ª—É—á–∏—à—å —á–µ—Å—Ç–Ω—ã–π, –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏ –∞–Ω–æ–Ω–∏–º–Ω—ã–π –æ—Ç–≤–µ—Ç."
  )

  kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üìö –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", callback_data="help_me")],
    [InlineKeyboardButton(text="üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∞–Ω–æ–Ω–∏–º–Ω–æ", callback_data="ai_support")],
    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="navigator")]
  ])
  await c.message.edit_text(text=text, reply_markup=kb)


# === –ö–ª–∞—Å—Ç–µ—Ä 6: –°–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤ –æ–±—â–µ–Ω–∏–∏ ===
@dp.callback_query(F.data == "cluster_6")
async def cluster_6(c: types.CallbackQuery):
  await log_action(c.from_user.id, "cluster_6")
  await add_chat_message(c.message.chat.id, "ai", "cluster_6_response")

  text = (
    "üë• *–°–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤ –æ–±—â–µ–Ω–∏–∏*\n\n"
    "–ë—ã–≤–∞–µ—Ç —Ç—è–∂–µ–ª–æ –Ω–∞—Ö–æ–¥–∏—Ç—å –æ–±—â–∏–π —è–∑—ã–∫ —Å —Ä–æ–¥–∏—Ç–µ–ª—è–º–∏, –¥—Ä—É–∑—å—è–º–∏, —É—á–∏—Ç–µ–ª—è–º–∏.\n\n"
    "–ß—É–≤—Å—Ç–≤—É–µ—à—å, —á—Ç–æ —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é—Ç? –ë–æ–∏—à—å—Å—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤? –û–¥–∏–Ω–æ–∫, –¥–∞–∂–µ –≤ —Ç–æ–ª–ø–µ?\n\n"
    "–¢—ã –Ω–µ –æ–¥–∏–Ω. –î–∞–≤–∞–π –≤–º–µ—Å—Ç–µ –Ω–∞–π–¥—ë–º —Å–ø–æ—Å–æ–±—ã —É–ª—É—á—à–∏—Ç—å –æ–±—â–µ–Ω–∏–µ ‚Äî –∏ –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è —É—Å–ª—ã—à–∞–Ω–Ω—ã–º."
  )

  kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üß† –°–æ–≤–µ—Ç—ã –ø–æ –æ–±—â–µ–Ω–∏—é", callback_data="help_me")],
    [InlineKeyboardButton(text="üí¨ –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å (–ò–ò-–ø–æ–¥–¥–µ—Ä–∂–∫–∞)", callback_data="ai_support")],
    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="navigator")]
  ])
  await c.message.edit_text(text=text, reply_markup=kb)


# === –ü–æ–¥–¥–µ—Ä–∂–∫–∞ (–ò–ò) ‚Äî –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ ===
@dp.callback_query(F.data == "ai_support")
async def ai_support(c: types.CallbackQuery):
  await log_action(c.from_user.id, "ai_support")
  await c.message.edit_text(
    "üí¨ –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî —Ü–∏—Ñ—Ä–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫. –°–ø—Ä–∞—à–∏–≤–∞–π, —á—Ç–æ –≤–æ–ª–Ω—É–µ—Ç ‚Äî –ø–æ–º–æ–≥—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è.\n\n"
    "–ü–æ–∫–∞ —á—Ç–æ —è –Ω–µ –º–æ–≥—É –≤–µ—Å—Ç–∏ –¥–∏–∞–ª–æ–≥, –Ω–æ —Å–∫–æ—Ä–æ —ç—Ç–æ –ø–æ—è–≤–∏—Ç—Å—è.\n"
    "–ê –ø–æ–∫–∞ –º–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É ‚Äî –Ω–∞–∂–º–∏ ¬´‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å¬ª.",
    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
      [InlineKeyboardButton(text="‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="question")],
      [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]
    ])
  )


# === –ö–æ–Ω—Ç–∞–∫—Ç—ã ===
@dp.callback_query(F.data == "contacts")
async def contacts(c: types.CallbackQuery):
  await log_action(c.from_user.id, "contacts")
  await add_chat_message(c.message.chat.id, "user", "contacts")
  rows = await get_contacts()
  if not rows:
    text = "–ö–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö —á–µ—Ä–µ–∑ –ø–∞–Ω–µ–ª—å."
  else:
    text = "\n\n".join(
      f"*{category}*\n{name} ‚Äî `{phone}`\n_{description}_"
      for category, name, phone, description in rows
    )
  await add_chat_message(c.message.chat.id, "ai", "contacts_response")
  await c.message.edit_text(
    text=text,
    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
      [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]
    ])
  )


# === –¢—Ä–µ–≤–æ–∂–Ω–∞—è –∫–Ω–æ–ø–∫–∞ ===
@dp.callback_query(F.data == "sos")
async def sos(c: types.CallbackQuery):
  await log_action(c.from_user.id, "sos")
  text = await get_sos()
  if not text.strip():
    text = (
      "üÜò *–¢—Ä–µ–≤–æ–∂–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞*\n\n"
      "–ï—Å–ª–∏ —Ç–µ–±–µ —É–≥—Ä–æ–∂–∞—é—Ç –∏–ª–∏ —Ç—ã –≤ –æ–ø–∞—Å–Ω–æ—Å—Ç–∏:\n"
      "‚Ä¢ [–ü–æ–∑–≤–æ–Ω–∏—Ç—å 112](tel:112) ‚Äî —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —Å–ª—É–∂–±—ã\n"
      "‚Ä¢ [–ü–æ–∑–≤–æ–Ω–∏—Ç—å 102](tel:102) ‚Äî –ø–æ–ª–∏—Ü–∏—è\n"
      "‚Ä¢ [–î–µ—Ç—Å–∫–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω –¥–æ–≤–µ—Ä–∏—è 8-800-2000-122](tel:88002000122) ‚Äî –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ –∏ –∞–Ω–æ–Ω–∏–º–Ω–æ\n\n"
      "–û—Å—Ç–∞–≤–∞–π—Å—è –Ω–∞ –ª–∏–Ω–∏–∏. –¢—ã –Ω–µ –æ–¥–∏–Ω."
    )
  try:
    await c.message.edit_text(
      text=text,
      reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]
      ]),
      disable_web_page_preview=True
    )
  except TelegramBadRequest:
    await c.message.answer(
      text=text,
      reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]
      ]),
      disable_web_page_preview=True
    )
    await c.message.delete()


# === –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ —Ç—Ä–µ–≤–æ–∂–Ω–æ–π –∫–Ω–æ–ø–∫–∏ –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ===
@dp.message(F.text == "üö® –¢—Ä–µ–≤–æ–∂–Ω–∞—è –∫–Ω–æ–ø–∫–∞")
async def sos_direct(m: types.Message):
  await log_action(m.from_user.id, "sos_direct")
  text = await get_sos()
  if not text.strip():
    text = (
      "üÜò *–¢—Ä–µ–≤–æ–∂–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞*\n\n"
      "–ï—Å–ª–∏ —Ç–µ–±–µ —É–≥—Ä–æ–∂–∞—é—Ç –∏–ª–∏ —Ç—ã –≤ –æ–ø–∞—Å–Ω–æ—Å—Ç–∏:\n"
      "‚Ä¢ [–ü–æ–∑–≤–æ–Ω–∏—Ç—å 112](tel:112) ‚Äî —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —Å–ª—É–∂–±—ã\n"
      "‚Ä¢ [–ü–æ–∑–≤–æ–Ω–∏—Ç—å 102](tel:102) ‚Äî –ø–æ–ª–∏—Ü–∏—è\n"
      "‚Ä¢ [–î–µ—Ç—Å–∫–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω –¥–æ–≤–µ—Ä–∏—è 8-800-2000-122](tel:88002000122) ‚Äî –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ –∏ –∞–Ω–æ–Ω–∏–º–Ω–æ\n\n"
      "–û—Å—Ç–∞–≤–∞–π—Å—è –Ω–∞ –ª–∏–Ω–∏–∏. –¢—ã –Ω–µ –æ–¥–∏–Ω."
    )
  kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]
  ])
  await m.answer(text, reply_markup=kb, disable_web_page_preview=True)


# === –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è ===
@dp.callback_query(F.data == "events")
async def events(c: types.CallbackQuery):
  await log_action(c.from_user.id, "events")
  rows = await get_events()
  if not rows:
    text = "–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π. –°–ª–µ–¥–∏ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!"
  else:
    text = "\n\n".join(
      f"*{title}* ({date})\n{description}\n[–ü–æ–¥—Ä–æ–±–Ω–µ–µ]({link})"
      for title, date, description, link in rows
    )
  await c.message.edit_text(
    text=text,
    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
      [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]
    ]),
    disable_web_page_preview=True
  )


# === –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å ===
@dp.callback_query(F.data == "question")
async def question(c: types.CallbackQuery, state: FSMContext):
  await log_action(c.from_user.id, "question")
  await add_chat_message(c.message.chat.id, "user", "question")
  await c.message.edit_text(
    "–ù–∞–ø–∏—à–∏, —á—Ç–æ —Ç–µ–±—è –±–µ—Å–ø–æ–∫–æ–∏—Ç. –Ø –ø–µ—Ä–µ–¥–∞–º –≤–æ–ø—Ä–æ—Å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º.\n\n"
    "–¢—ã –º–æ–∂–µ—à—å –æ—Å—Ç–∞—Ç—å—Å—è –∞–Ω–æ–Ω–∏–º–Ω—ã–º ‚Äî —Ç–≤–æ—ë –∏–º—è –Ω–µ –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è."
  )
  await state.set_state(QuestionForm.question)


@dp.message(QuestionForm.question)
async def save_question_handler(m: types.Message, state: FSMContext):
  await add_chat_message(m.chat.id, "user", m.text)
  await save_question(m.from_user.id, m.text)
  response = (
    "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –¥–æ–≤–µ—Ä–∏–ª –º–Ω–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å.\n\n"
    "–Ø –ø–µ—Ä–µ–¥–∞–ª –µ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º. –ï—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è ‚Äî –æ–Ω–∏ —Å–≤—è–∂—É—Ç—Å—è —á–µ—Ä–µ–∑ —ç—Ç–æ–≥–æ –±–æ—Ç–∞.\n\n"
    "–¢—ã —Å–¥–µ–ª–∞–ª –≤–∞–∂–Ω—ã–π —à–∞–≥. –Ø —Ä—è–¥–æ–º."
  )
  await m.answer(response)
  await add_chat_message(m.chat.id, "ai", response)
  await state.clear()
  await show_main(m, edit=False)


# === –ü–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç ===
@dp.callback_query(F.data == "tip")
async def tip(c: types.CallbackQuery):
  await log_action(c.from_user.id, "tip")
  text = await get_tip()
  await c.message.edit_text(
    f"üí° *–°–æ–≤–µ—Ç –¥–Ω—è:*\n\n{text}\n\n–ü—É—Å—Ç—å –¥–µ–Ω—å –±—É–¥–µ—Ç —á—É—Ç—å –ª–µ–≥—á–µ.",
    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
      [InlineKeyboardButton(text="üîÑ –î—Ä—É–≥–æ–π —Å–æ–≤–µ—Ç", callback_data="tip")],
      [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]
    ])
  )


# === –ü–æ–¥–ø–∏—Å–∫–∞ ===
@dp.callback_query(F.data == "sub")
async def sub(c: types.CallbackQuery):
  success = await toggle_subscription(c.from_user.id)
  if success:
    response = (
      "üíö –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –æ—Å—Ç–∞—ë—à—å—Å—è –Ω–∞ —Å–≤—è–∑–∏!\n"
      "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ —ç—Ç–æ –∂–µ –≤—Ä–µ–º—è —è –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ —Ç—ë–ø–ª—ã–π —Å–æ–≤–µ—Ç –∏–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ."
    )
  else:
    response = (
      "–•–æ—Ä–æ—à–æ, —è –Ω–µ –±—É–¥—É –±–µ—Å–ø–æ–∫–æ–∏—Ç—å.\n"
      "–ù–æ –ø–æ–º–Ω–∏ ‚Äî —Ç—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è. –Ø –∑–¥–µ—Å—å, –∫–æ–≥–¥–∞ –∑–∞—Ö–æ—á–µ—à—å."
    )
  await c.answer(response, show_alert=True)
  await show_main(c, edit=False)


# === –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ===
@dp.callback_query(F.data == "admin")
async def admin(c: types.CallbackQuery, state: FSMContext):
  if c.from_user.id not in ADMIN_IDS:
    await c.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
    return
  await log_action(c.from_user.id, "admin")
  kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üìí –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="ad_contacts")],
    [InlineKeyboardButton(text="üÜò SOS", callback_data="ad_sos")],
    [InlineKeyboardButton(text="üìÖ –°–æ–±—ã—Ç–∏–µ", callback_data="ad_event")],
    [InlineKeyboardButton(text="üìù –°—Ç–∞—Ç—å—è", callback_data="ad_article")],
    [InlineKeyboardButton(text="üí° –°–æ–≤–µ—Ç", callback_data="ad_tip")],
    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]
  ])
  await c.message.edit_text("üõ†Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: –≤—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª", reply_markup=kb)
  await state.set_state(AdminForm.section)


@dp.callback_query(F.data.startswith("ad_"))
async def admin_pick(c: types.CallbackQuery, state: FSMContext):
  if c.from_user.id not in ADMIN_IDS:
    await c.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
    return
  messages = {
    "ad_contacts": "–§–æ—Ä–º–∞—Ç: category|name|+7(XXX)XXX-XX-XX|description",
    "ad_sos": "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ç—Ä–µ–≤–æ–∂–Ω–æ–π –∫–Ω–æ–ø–∫–∏:",
    "ad_event": "title|YYYY-MM-DD|description|link",
    "ad_article": "category|title|content",
    "ad_tip": "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–≤–µ—Ç–∞:"
  }
  msg = messages.get(c.data)
  if not msg:
    await c.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
    return
  await c.message.edit_text(msg)
  await state.update_data(section=c.data)
  await state.set_state(AdminForm.payload)


@dp.message(AdminForm.payload)
async def admin_save(m: types.Message, state: FSMContext):
  if m.from_user.id not in ADMIN_IDS:
    await m.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
    return
  data = await state.get_data()
  section, parts = data["section"], [x.strip() for x in m.text.split('|')]
  try:
    if section == "ad_contacts" and len(parts) == 4 and PHONE_RX.fullmatch(parts[2]):
      await upsert_contact(*parts)
    elif section == "ad_sos":
      await upsert_sos(m.text)
    elif section == "ad_event" and len(parts) == 4:
      await upsert_event(*parts)
    elif section == "ad_article" and len(parts) == 3:
      await upsert_article(*parts)
    elif section == "ad_tip":
      await upsert_tip(m.text)
    else:
      await m.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
      return
    await m.answer("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
    await show_main(m, edit=False)
  finally:
    await state.clear()


# === –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===
@dp.callback_query(F.data == "back")
async def back(c: types.CallbackQuery):
  await show_main(c, edit=True)


# === –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–≤–µ—Ç–æ–≤ ===
async def notifier():
  while True:
    await asyncio.sleep(60)
    user_ids = await get_due_subscribers()
    if not user_ids:
      continue
    tip_text = await get_tip()
    sent = []
    for user_id in user_ids:
      try:
        await bot.send_message(
          user_id,
          f"üí° –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:\n\n{tip_text}\n\n–¢—ã –Ω–µ –æ–¥–∏–Ω. –Ø —Ä—è–¥–æ–º."
        )
        sent.append(user_id)
      except Exception:
        pass
    if sent:
      await reset_subscriptions(sent)


# === –ó–∞–ø—É—Å–∫ ===
async def main():
  await init_db()
  asyncio.create_task(notifier())
  print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
  await dp.start_polling(bot)


if __name__ == "__main__":
  asyncio.run(main())