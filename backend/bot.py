import os
import re
import asyncio
from datetime import timedelta
from typing import Optional, Dict

from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.dispatcher.middlewares.base import BaseMiddleware
from aiogram.client.default import DefaultBotProperties
from aiogram.exceptions import TelegramBadRequest

from db import (
    init_db, log_action, get_role, set_role, add_chat_message,
    get_contacts, get_sos, get_events, get_tip, save_question,
    upsert_contact, upsert_sos, upsert_event, upsert_article, upsert_tip,
    get_due_subscribers, reset_subscriptions, toggle_subscription
)

# === –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
WELCOME_TEXT = (
    "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî *–¶–∏—Ñ—Ä–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫* –¶–µ–Ω—Ç—Ä–∞ –º–æ–ª–æ–¥–µ–∂–Ω–æ–π –ø–æ–ª–∏—Ç–∏–∫–∏ –¢–æ–º—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏.\n\n"
    "üîπ –ï—Å–ª–∏ —Ç—ã –≤ *–æ—Å—Ç—Ä–æ–π –∏–ª–∏ —É–≥—Ä–æ–∂–∞—é—â–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏* ‚Äî —Å—Ä–∞–∑—É –Ω–∞–∂–º–∏ **¬´üö® –¢—Ä–µ–≤–æ–∂–Ω–∞—è –∫–Ω–æ–ø–∫–∞¬ª**.\n"
    "–¢—ã –ø–æ–ª—É—á–∏—à—å —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏ —Å–º–æ–∂–µ—à—å –∞–Ω–æ–Ω–∏–º–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å ‚Äî —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π.\n\n"
    "üîπ –ï—Å–ª–∏ –≤—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ ‚Äî –≤—ã–±–µ—Ä–∏, –∫—Ç–æ —Ç—ã:\n"
    "‚Ä¢ *–Ø –ø–æ–¥—Ä–æ—Å—Ç–æ–∫* ‚Äî –ø–æ–¥–¥–µ—Ä–∂–∫–∞, —Å–æ–≤–µ—Ç—ã, –ø–æ–Ω–∏–º–∞–Ω–∏–µ\n"
    "‚Ä¢ *–Ø –≤–∑—Ä–æ—Å–ª—ã–π* ‚Äî —Ä–µ—Å—É—Ä—Å—ã –∏ –ø–æ–º–æ—â—å\n\n"
    "–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –æ—Ç–∫—Ä–æ—é—Ç—Å—è —Ä–∞–∑–¥–µ–ª—ã –ø–æ–º–æ—â–∏, –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –∏ —Å–≤—è–∑–∏ —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º–∏.\n\n"
    "–í—ã–±–µ—Ä–∏, —á—Ç–æ –ø–æ–¥—Ö–æ–¥–∏—Ç —Ç–µ–±–µ —Å–µ–π—á–∞—Å:"
)

INFO_TEXT = (
    "üß† *–ß–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å?*\n\n"
    "–í—ã–±–∏—Ä–∞–π, —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ ‚Äî —è —Ä—è–¥–æ–º:\n\n"

    "üÜò *–¢—Ä–µ–≤–æ–∂–Ω–∞—è –∫–Ω–æ–ø–∫–∞*\n"
    "–ï—Å–ª–∏ —Ç—ã –≤ –æ–ø–∞—Å–Ω–æ—Å—Ç–∏ ‚Äî –ø–æ–ª—É—á–∏ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –º–≥–Ω–æ–≤–µ–Ω–Ω–æ.\n\n"

    "üß≠ *–ú–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å*\n"
    "–ü–æ—à–∞–≥–æ–≤–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞: —á—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ —Ç—Ä–µ–≤–æ–∂–Ω–æ, —Å—Ç—Ä–∞—à–Ω–æ –∏–ª–∏ —Ç—è–∂–µ–ª–æ.\n\n"

    "ü§ñ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ (—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ò–ò)\n"
    "–ü–æ–ª—É—á–∏ —Å–æ–≤–µ—Ç, –ø—Ä–µ–∂–¥–µ —á–µ–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É\n\n"

    "üìû *–ö—É–¥–∞ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è?*\n"
    "–ì–æ—Ä—è—á–∏–µ –ª–∏–Ω–∏–∏, –ø—Å–∏—Ö–æ–ª–æ–≥–∏, —é—Ä–∏—Å—Ç—ã ‚Äî –∫–æ–Ω—Ç–∞–∫—Ç—ã —Å–ª—É–∂–± –ø–æ–¥–¥–µ—Ä–∂–∫–∏.\n\n"

    "‚ùì *–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å*\n"
    "–ê–Ω–æ–Ω–∏–º–Ω–æ –Ω–∞–ø–∏—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É ‚Äî —è –ø–µ—Ä–µ–¥–∞–º –∏ –ø–æ–º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç.\n\n"

    "üìÖ *–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è*\n"
    "–ß–µ–º –∑–∞–Ω—è—Ç—å—Å—è: –∞—Ñ–∏—à–∞ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –º–æ–ª–æ–¥—ë–∂–∏ –æ—Ç –¶–ú–ü –∏ –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤.\n\n"

    "üí° *–ü–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç*\n"
    "–¢—ë–ø–ª—ã–π —Å–æ–≤–µ—Ç –¥–Ω—è ‚Äî —á—Ç–æ–±—ã –±—ã–ª–æ —á—É—Ç—å –ª–µ–≥—á–µ.\n\n"

    "üîî *–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É*\n"
    "–ü–æ–ª—É—á–∞–π –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ —Å–æ–≤–µ—Ç—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Å—Ç–∞–≤–∞–π—Å—è –Ω–∞ —Å–≤—è–∑–∏.\n\n"

    "üîÑ *–ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å*\n"
    "–°–º–µ–Ω–∏ —Ä–æ–ª—å (–ø–æ–¥—Ä–æ—Å—Ç–æ–∫ / –≤–∑—Ä–æ—Å–ª—ã–π), —á—Ç–æ–±—ã —è –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞–ª, –∫–∞–∫ –ø–æ–º–æ—á—å.\n\n"

    "–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å? –í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω–æ–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:"
)

PHONE_RX = re.compile(r"^\+7\(\d{3}\)\d{3}-\d{2}-\d{2}$")

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv_path = os.path.join(os.path.dirname(__file__), ".env")
if not os.path.exists(dotenv_path):
    print(f"‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {dotenv_path}")
    exit(1)

load_dotenv(dotenv_path)
print(f"‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑: {dotenv_path}")

BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    print("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞ –≤ .env")
    exit(1)

ADMIN_IDS = {int(x) for x in os.getenv("ADMIN_IDS", "123456789").split(',') if x.strip()}

# === –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π ===
class MessageManager:
    """–•—Ä–∞–Ω–∏—Ç ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    def __init__(self):
        self.last_message_id: Dict[int, int] = {}

    def update(self, user_id: int, message_id: int):
        self.last_message_id[user_id] = message_id

    def get_last(self, user_id: int) -> Optional[int]:
        return self.last_message_id.get(user_id)

    async def safe_delete(self, bot: Bot, user_id: int):
        last_msg_id = self.get_last(user_id)
        if last_msg_id:
            try:
                await bot.delete_message(chat_id=user_id, message_id=last_msg_id)
            except TelegramBadRequest:
                pass
            self.last_message_id.pop(user_id, None)

    async def safe_edit_or_send(
        self,
        bot: Bot,
        user_id: int,
        text: str,
        reply_markup=None,
        parse_mode="Markdown",
        disable_web_page_preview=False
    ):
        last_msg_id = self.get_last(user_id)
        if last_msg_id:
            try:
                await bot.edit_message_text(
                    chat_id=user_id,
                    message_id=last_msg_id,
                    text=text,
                    reply_markup=reply_markup,
                    parse_mode=parse_mode,
                    disable_web_page_preview=disable_web_page_preview
                )
                return
            except TelegramBadRequest:
                await self.safe_delete(bot, user_id)

        msg = await bot.send_message(
            chat_id=user_id,
            text=text,
            reply_markup=reply_markup,
            parse_mode=parse_mode,
            disable_web_page_preview=disable_web_page_preview
        )
        self.update(user_id, msg.message_id)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π
msg_manager = MessageManager()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(BOT_TOKEN, default=DefaultBotProperties(parse_mode="Markdown"))
dp = Dispatcher(storage=MemoryStorage())


# === Middleware: –û—Ç–≤–µ—Ç –Ω–∞ callback_query –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã ===
class AnswerCallbackMiddleware(BaseMiddleware):
    async def __call__(self, handler, event: types.CallbackQuery, data):
        await event.answer()
        return await handler(event, data)


class ThrottlingMiddleware(BaseMiddleware):
    def __init__(self, rate_limit=10):
        self.rate_limit = rate_limit
        self.last_call = {}

    async def __call__(self, handler, event, data):
        user_id = event.from_user.id
        now = asyncio.get_event_loop().time()
        last = self.last_call.get(user_id, 0)
        if now - last < 1 / self.rate_limit:
            return
        self.last_call[user_id] = now
        return await handler(event, data)


dp.callback_query.middleware(AnswerCallbackMiddleware())
dp.message.middleware(ThrottlingMiddleware())


# === FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è ===
class RoleForm(StatesGroup):
    role = State()

class QuestionForm(StatesGroup):
    question = State()

class AdminForm(StatesGroup):
    section = State()
    payload = State()


# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===
def get_persistent_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üö® –¢—Ä–µ–≤–æ–∂–Ω–∞—è –∫–Ω–æ–ø–∫–∞")]],
        resize_keyboard=True,
        one_time_keyboard=False
    )


def main_menu(user_id: int) -> InlineKeyboardMarkup:
    buttons = [
        [InlineKeyboardButton(text="üÜò –¢—Ä–µ–≤–æ–∂–Ω–∞—è –∫–Ω–æ–ø–∫–∞", callback_data="sos")],
        [InlineKeyboardButton(text="üß≠ –ú–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å", callback_data="navigator")],
        [InlineKeyboardButton(text="ü§ñ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ (—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ò–ò)", callback_data="ai_support")],
        [InlineKeyboardButton(text="üìû –ö—É–¥–∞ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è?", callback_data="contacts")],
        [InlineKeyboardButton(text="‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="question")],
        [InlineKeyboardButton(text="üìÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", callback_data="events")],
        [InlineKeyboardButton(text="üí° –ü–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç", callback_data="tip")],
        [InlineKeyboardButton(text="üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É", callback_data="sub")],
        [InlineKeyboardButton(text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å", callback_data="change_role")]
    ]
    if user_id in ADMIN_IDS:
        buttons.append([InlineKeyboardButton(text="üõ†Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)


async def show_main(user_id: int, greeting: bool = False):
    text = INFO_TEXT if greeting else "–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"
    markup = main_menu(user_id)
    await msg_manager.safe_edit_or_send(bot, user_id, text, reply_markup=markup)


# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===

@dp.message(Command("start"))
async def start(m: types.Message, state: FSMContext):
    await log_action(m.from_user.id, "start")
    role = await get_role(m.from_user.id)
    kb = get_persistent_keyboard()

    if not role:
        kb.keyboard.append([KeyboardButton(text="–Ø –ø–æ–¥—Ä–æ—Å—Ç–æ–∫"), KeyboardButton(text="–Ø –≤–∑—Ä–æ—Å–ª—ã–π")])
        await msg_manager.safe_edit_or_send(bot, m.from_user.id, WELCOME_TEXT, reply_markup=kb)
        await state.set_state(RoleForm.role)
    else:
        await m.answer("–ü—Ä–∏–≤–µ—Ç —Å–Ω–æ–≤–∞!", reply_markup=kb)
        await show_main(m.from_user.id, greeting=True)


@dp.message(RoleForm.role)
async def choose_role(m: types.Message, state: FSMContext):
    text = m.text.strip().lower()
    if "—Ç—Ä–µ–≤–æ–∂–Ω–∞—è –∫–Ω–æ–ø–∫–∞" in text or "üö®" in text:
        await state.clear()
        await sos(types.CallbackQuery(
            id="temp", from_user=m.from_user, chat_instance="temp", message=m, data="sos"
        ))
        return

    role = "teen" if "–ø–æ–¥—Ä–æ—Å—Ç–æ–∫" in text else "adult"
    await set_role(m.from_user.id, role)
    await state.clear()

    kb = get_persistent_keyboard()
    await m.reply("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä. –Ø —É—á—Ç—É —ç—Ç–æ, —á—Ç–æ–±—ã –ª—É—á—à–µ –ø–æ–º–æ–≥–∞—Ç—å.", reply_markup=kb)
    await show_main(m.from_user.id, greeting=True)


@dp.callback_query(F.data == "change_role")
async def change_role(c: types.CallbackQuery, state: FSMContext):
    await log_action(c.from_user.id, "change_role")
    await msg_manager.safe_delete(bot, c.from_user.id)

    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–Ø –ø–æ–¥—Ä–æ—Å—Ç–æ–∫"), KeyboardButton(text="–Ø –≤–∑—Ä–æ—Å–ª—ã–π")],
            [KeyboardButton(text="üö® –¢—Ä–µ–≤–æ–∂–Ω–∞—è –∫–Ω–æ–ø–∫–∞")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    await c.message.answer("–ö—Ç–æ —Ç—ã? –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ –ª—É—á—à–µ –ø–æ–º–æ–≥–∞—Ç—å —Ç–µ–±–µ.", reply_markup=kb)
    await state.set_state(RoleForm.role)


@dp.callback_query(F.data == "navigator")
async def navigator(c: types.CallbackQuery):
    await log_action(c.from_user.id, "navigator")
    await add_chat_message(c.message.chat.id, "user", "navigator")

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üòî –î–µ–ø—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è", callback_data="cluster_1")],
        [InlineKeyboardButton(text="‚ö†Ô∏è –°—É–∏—Ü–∏–¥–∞–ª—å–Ω—ã–µ –º—ã—Å–ª–∏", callback_data="cluster_2")],
        [InlineKeyboardButton(text="üí¢ –ê–≥—Ä–µ—Å—Å–∏—è –∏ —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ", callback_data="cluster_3")],
        [InlineKeyboardButton(text="üçΩÔ∏è –ü—Ä–æ–±–ª–µ–º—ã —Å –µ–¥–æ–π", callback_data="cluster_4")],
        [InlineKeyboardButton(text="ü´Ç –ü–æ–ª–æ–≤–æ–µ –≤–æ—Å–ø–∏—Ç–∞–Ω–∏–µ", callback_data="cluster_5")],
        [InlineKeyboardButton(text="üë• –°–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤ –æ–±—â–µ–Ω–∏–∏", callback_data="cluster_6")],
        [InlineKeyboardButton(text="üí¨ –î—Ä—É–≥–æ–µ ‚Äî —Ö–æ—á—É –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å", callback_data="ai_support")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]
    ])

    text = (
        "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±—è –±–µ—Å–ø–æ–∫–æ–∏—Ç. –¢—ã –Ω–µ –æ–±—è–∑–∞–Ω –≤—Å—ë —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å ‚Äî –ø—Ä–æ—Å—Ç–æ —É–∫–∞–∂–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.\n\n"
        "–Ø –ø–æ–º–æ–≥—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è, –ø–æ–¥—Å–∫–∞–∂—É, –≥–¥–µ –∏—Å–∫–∞—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É, –∏ –±—É–¥—É —Ä—è–¥–æ–º, –¥–∞–∂–µ –µ—Å–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ö–æ—á–µ—Ç—Å—è –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å."
    )
    await msg_manager.safe_edit_or_send(bot, c.from_user.id, text, reply_markup=kb)


# === –ö–ª–∞—Å—Ç–µ—Ä—ã 1‚Äì6 ===
# (–í—Å–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ callback_data –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º)

@dp.callback_query(F.data == "cluster_1")
async def cluster_1(c: types.CallbackQuery):
    await log_action(c.from_user.id, "cluster_1")
    text = (
        "üòî *–î–µ–ø—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è*\n\n"
        "–ò–Ω–æ–≥–¥–∞ –Ω–∞—Å—Ç—É–ø–∞–µ—Ç —Ç—è–∂–µ—Å—Ç—å: –≤—Å—ë –∫–∞–∂–µ—Ç—Å—è –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω—ã–º, –Ω–µ—Ç —Å–∏–ª, –ø—Ä–æ–ø–∞–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å.\n\n"
        "–≠—Ç–æ –Ω–µ —Å–ª–∞–±–æ—Å—Ç—å. –≠—Ç–æ —Å–∏–≥–Ω–∞–ª, —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞.\n\n"
        "–ï—Å–ª–∏ —Ç—ã –¥–∞–≤–Ω–æ —á—É–≤—Å—Ç–≤—É–µ—à—å —É—Å—Ç–∞–ª–æ—Å—Ç—å, –ø—É—Å—Ç–æ—Ç—É –∏–ª–∏ –±–µ–∑–Ω–∞–¥—ë–∂–Ω–æ—Å—Ç—å ‚Äî –Ω–µ –∂–¥–∏. –ü–æ–º–æ—â—å —Ä–∞–±–æ—Ç–∞–µ—Ç."
    )
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ö°Ô∏è –ü–µ—Ä–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è", callback_data="cluster_1_help")],
        [InlineKeyboardButton(text="üí¨ –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å (–ò–ò-–ø–æ–¥–¥–µ—Ä–∂–∫–∞)", callback_data="ai_support")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="navigator")]
    ])
    await msg_manager.safe_edit_or_send(bot, c.from_user.id, text, reply_markup=kb)

@dp.callback_query(F.data == "cluster_1_help")
async def cluster_1_help(c: types.CallbackQuery):
    await log_action(c.from_user.id, "cluster_1_help")
    text = (
        "üß† *–ü–µ—Ä–≤–∞—è –ø–æ–º–æ—â—å –ø—Ä–∏ –¥–µ–ø—Ä–µ—Å—Å–∏–≤–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è—Ö*\n\n"
        "1. **–ù–µ –æ—Å—Ç–∞–≤–∞–π—Å—è –æ–¥–∏–Ω.** –ù–∞–ø–∏—à–∏ —Ç–æ–º—É, –∫—Ç–æ —Ç–µ–±—è –≤—ã—Å–ª—É—à–∞–µ—Ç ‚Äî –¥–∞–∂–µ –µ—Å–ª–∏ –ø—Ä–æ—Å—Ç–æ —Å–∫–∞–∂–µ—à—å: ¬´–ú–Ω–µ —Ç—è–∂–µ–ª–æ¬ª.\n\n"
        "2. **–°–¥–µ–ª–∞–π –º–∞–ª–µ–Ω—å–∫–æ–µ –¥–µ–ª–æ.** –ü—Ä–æ–≥—É–ª–∫–∞, –¥—É—à, –∑–∞–ø–∏—Å—å –º—ã—Å–ª–µ–π ‚Äî –ª—é–±–æ–π —à–∞–≥ —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø–æ–±–µ–¥–æ–π.\n\n"
        "3. **–û–±—Ä–∞—Ç–∏—Å—å –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É.** –ü—Å–∏—Ö–æ–ª–æ–≥ –∏–ª–∏ –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç ‚Äî –Ω–µ –¥–ª—è ¬´—Å—É–º–∞—Å—à–µ–¥—à–∏—Ö¬ª, –∞ –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ö–æ—á–µ—Ç –∂–∏—Ç—å –ª–µ–≥—á–µ.\n\n"
        "–¢—ã –Ω–µ –æ–±—è–∑–∞–Ω —Å–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ –æ–¥–∏–Ω–æ—á–∫—É."
    )
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìû –ö—É–¥–∞ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è?", callback_data="contacts")],
        [InlineKeyboardButton(text="üí¨ –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å (–ò–ò-–ø–æ–¥–¥–µ—Ä–∂–∫–∞)", callback_data="ai_support")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="cluster_1")]
    ])
    await msg_manager.safe_edit_or_send(bot, c.from_user.id, text, reply_markup=kb)


# === –ö–ª–∞—Å—Ç–µ—Ä 2: –°—É–∏—Ü–∏–¥–∞–ª—å–Ω—ã–µ –º—ã—Å–ª–∏ ===
@dp.callback_query(F.data == "cluster_2")
async def cluster_2(c: types.CallbackQuery):
    await log_action(c.from_user.id, "cluster_2")
    text = (
        "‚ö†Ô∏è *–°—É–∏—Ü–∏–¥–∞–ª—å–Ω—ã–µ –º—ã—Å–ª–∏*\n\n"
        "–ï—Å–ª–∏ —Ç—ã –¥—É–º–∞–µ—à—å –æ —Ç–æ–º, —á—Ç–æ–±—ã —É–π—Ç–∏ –∏–∑ –∂–∏–∑–Ω–∏ ‚Äî —ç—Ç–æ –Ω–µ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ —Ç—ã —Å–ª–∞–±.\n\n"
        "–≠—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ —Ç–µ–±–µ *–æ—á–µ–Ω—å —Ç—è–∂–µ–ª–æ*, –∏ —Ç—ã –±–æ–ª—å—à–µ –Ω–µ –≤–∏–¥–∏—à—å –≤—ã—Ö–æ–¥–∞.\n\n"
        "–ù–æ –≤—ã—Ö–æ–¥ –µ—Å—Ç—å. –ï—Å—Ç—å –ª—é–¥–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç. –¢—ã –≤–∞–∂–µ–Ω ‚Äî –¥–∞–∂–µ –µ—Å–ª–∏ —Å–µ–π—á–∞—Å –∫–∞–∂–µ—Ç—Å—è –∏–Ω–∞—á–∞."
    )
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ö°Ô∏è –ü–µ—Ä–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è", callback_data="cluster_2_help")],
        [InlineKeyboardButton(text="üí¨ –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å (–ò–ò-–ø–æ–¥–¥–µ—Ä–∂–∫–∞)", callback_data="ai_support")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="navigator")]
    ])
    await msg_manager.safe_edit_or_send(bot, c.from_user.id, text, reply_markup=kb)

@dp.callback_query(F.data == "cluster_2_help")
async def cluster_2_help(c: types.CallbackQuery):
    await log_action(c.from_user.id, "cluster_2_help")
    text = (
        "üö® *–ü–µ—Ä–≤–∞—è –ø–æ–º–æ—â—å –ø—Ä–∏ —Å—É–∏—Ü–∏–¥–∞–ª—å–Ω—ã—Ö –º—ã—Å–ª—è—Ö*\n\n"
        "1. **–ù–µ –æ—Å—Ç–∞–≤–∞–π—Å—è –Ω–∞–µ–¥–∏–Ω–µ —Å —Å–æ–±–æ–π.** –ù–∞–ø–∏—à–∏, –ø–æ–∑–≤–æ–Ω–∏ ‚Äî —Ö–æ—Ç—å –∫–æ–º—É-—Ç–æ.\n\n"
        "2. **–ò—Å–ø–æ–ª—å–∑—É–π —Ç—Ä–µ–≤–æ–∂–Ω—É—é –∫–Ω–æ–ø–∫—É.** –¢—ã –ø–æ–ª—É—á–∏—à—å –∫–æ–Ω—Ç–∞–∫—Ç—ã, –≥–¥–µ —Ç–µ–±—è –≤—ã—Å–ª—É—à–∞—é—Ç *–ø—Ä—è–º–æ —Å–µ–π—á–∞—Å*.\n\n"
        "3. **–ó–∞–ø–∏—à–∏, —á—Ç–æ —á—É–≤—Å—Ç–≤—É–µ—à—å.** –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Ä–∞–∑–≥—Ä—É–∑–∏—Ç—å –≥–æ–ª–æ–≤—É –∏ –ø–æ–Ω—è—Ç—å, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –±–æ–ª–∏—Ç.\n\n"
        "–¢—ã –Ω–µ –æ–±—è–∑–∞–Ω —Å–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –æ–¥–∏–Ω. –ï—Å—Ç—å —Ç–µ, –∫—Ç–æ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å."
    )
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üÜò –¢—Ä–µ–≤–æ–∂–Ω–∞—è –∫–Ω–æ–ø–∫–∞", callback_data="sos")],
        [InlineKeyboardButton(text="üìû –ì–æ—Ä—è—á–∏–µ –ª–∏–Ω–∏–∏", callback_data="contacts")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="cluster_2")]
    ])
    await msg_manager.safe_edit_or_send(bot, c.from_user.id, text, reply_markup=kb)


# === –ö–ª–∞—Å—Ç–µ—Ä—ã 3‚Äì6 ===
# (–ö–æ—Ä–æ—Ç–∫–æ, –ø–æ —à–∞–±–ª–æ–Ω—É ‚Äî –≤—ã —É–∂–µ –∑–Ω–∞–µ—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É)

@dp.callback_query(F.data == "cluster_3")
async def cluster_3(c: types.CallbackQuery):
    await log_action(c.from_user.id, "cluster_3")
    text = (
        "üí¢ *–ê–≥—Ä–µ—Å—Å–∏—è –∏ —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ*\n\n"
        "–ó–ª–æ—Å—Ç—å ‚Äî –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è —ç–º–æ—Ü–∏—è. –ù–æ –∫–æ–≥–¥–∞ –æ–Ω–∞ —Ä–≤—ë—Ç—Å—è –Ω–∞—Ä—É–∂—É: –∫—Ä–∏–∫–∏, —É–¥–∞—Ä—ã, —Å–∞–º–æ–ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è ‚Äî —ç—Ç–æ —Å–∏–≥–Ω–∞–ª.\n\n"
        "–¢—ã –Ω–µ –ø–ª–æ—Ö–æ–π. –ü—Ä–æ—Å—Ç–æ —Ç–µ–±–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤, —á—Ç–æ–±—ã –≤—ã–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä –∏–Ω–∞—á–µ.\n\n"
        "–î–∞–≤–∞–π –Ω–∞–π–¥—ë–º —Å–ø–æ—Å–æ–±—ã —Å–ø—Ä–∞–≤–ª—è—Ç—å—Å—è, –Ω–µ –Ω–∞–≤—Ä–µ–¥–∏–≤ —Å–µ–±–µ –∏ –¥—Ä—É–≥–∏–º."
    )
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ö°Ô∏è –ü–µ—Ä–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è", callback_data="cluster_3_help")],
        [InlineKeyboardButton(text="üí¨ –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å (–ò–ò-–ø–æ–¥–¥–µ—Ä–∂–∫–∞)", callback_data="ai_support")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="navigator")]
    ])
    await msg_manager.safe_edit_or_send(bot, c.from_user.id, text, reply_markup=kb)

@dp.callback_query(F.data == "cluster_3_help")
async def cluster_3_help(c: types.CallbackQuery):
    text = (
        "üßò *–ü–µ—Ä–≤–∞—è –ø–æ–º–æ—â—å –ø—Ä–∏ –∞–≥—Ä–µ—Å—Å–∏–∏*\n\n"
        "1. **–û—Å—Ç–∞–Ω–æ–≤–∏—Å—å.** –ï—Å–ª–∏ —á—É–≤—Å—Ç–≤—É–µ—à—å, —á—Ç–æ —Å—Ä—ã–≤–∞–µ—à—å—Å—è ‚Äî —É–π–¥–∏, –¥—ã—à–∏, –ø–æ—Å—á–∏—Ç–∞–π –¥–æ 10.\n\n"
        "2. **–í—ã–ø—É—Å—Ç–∏ —ç–Ω–µ—Ä–≥–∏—é –∏–Ω–∞—á–µ.** –ë–µ–π –ø–æ–¥—É—à–∫—É, –±–µ–≥–∏, —Ä–≤–∏ –±—É–º–∞–≥—É, –∫—Ä–∏—á–∏ –≤ –ø—É—Å—Ç—É—é –∫–æ–º–Ω–∞—Ç—É.\n\n"
        "3. **–í–µ–¥–∏ –¥–Ω–µ–≤–Ω–∏–∫.** –ó–∞–ø–∏—Å—ã–≤–∞–π: —á—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å, —á—Ç–æ –ø–æ–¥—É–º–∞–ª, —á—Ç–æ –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞–ª, —á—Ç–æ —Å–¥–µ–ª–∞–ª.\n\n"
        "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ø–æ–Ω—è—Ç—å, —á—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç –≤—Å–ø—ã—à–∫–∏ ‚Äî –∏ –∫–∞–∫ –∏—Ö –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞—Ç—å."
    )
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìò –í–µ—Å—Ç–∏ –¥–Ω–µ–≤–Ω–∏–∫ (–°–ú–≠–†)", callback_data="help_me")],
        [InlineKeyboardButton(text="üí¨ –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å (–ò–ò-–ø–æ–¥–¥–µ—Ä–∂–∫–∞)", callback_data="ai_support")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="cluster_3")]
    ])
    await msg_manager.safe_edit_or_send(bot, c.from_user.id, text, reply_markup=kb)


@dp.callback_query(F.data == "cluster_4")
async def cluster_4(c: types.CallbackQuery):
    text = (
        "üçΩÔ∏è *–ü—Ä–æ–±–ª–µ–º—ã —Å –µ–¥–æ–π*\n\n"
        "–ö–æ–≥–¥–∞ –µ–¥–∞ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –≤—Ä–∞–≥–æ–º, –Ω–∞–≤—è–∑—á–∏–≤–æ–π –∏–¥–µ–µ–π –∏–ª–∏ —Å–ø–æ—Å–æ–±–æ–º –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å —Å–µ–±—è ‚Äî —ç—Ç–æ —Ç—Ä–µ–≤–æ–∂–Ω—ã–π –∑–≤–æ–Ω–æ—á–µ–∫.\n\n"
        "–†–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–∏—â–µ–≤–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è (–†–ü–ü) ‚Äî –Ω–µ –ø—Ä–æ ¬´–ø–æ—Ö—É–¥–µ—Ç—å¬ª, –∞ –ø—Ä–æ –±–æ–ª—å, —Ç—Ä–µ–≤–æ–≥—É, –ø–æ—Ç–µ—Ä—é –∫–æ–Ω—Ç—Ä–æ–ª—è.\n\n"
        "–¢—ã –º–æ–∂–µ—à—å –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å ¬´–∫–∞—Ä—Ç–∏–Ω–∫–µ¬ª, –Ω–æ –≤—Å—ë —Ä–∞–≤–Ω–æ –Ω—É–∂–¥–∞—Ç—å—Å—è –≤ –ø–æ–º–æ—â–∏."
    )
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ö°Ô∏è –ü–µ—Ä–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è", callback_data="cluster_4_help")],
        [InlineKeyboardButton(text="üí¨ –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å (–ò–ò-–ø–æ–¥–¥–µ—Ä–∂–∫–∞)", callback_data="ai_support")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="navigator")]
    ])
    await msg_manager.safe_edit_or_send(bot, c.from_user.id, text, reply_markup=kb)

@dp.callback_query(F.data == "cluster_4_help")
async def cluster_4_help(c: types.CallbackQuery):
    text = (
        "ü•ó *–ü–µ—Ä–≤–∞—è –ø–æ–º–æ—â—å –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å –µ–¥–æ–π*\n\n"
        "1. **–ù–µ —Å—Ä–∞–≤–Ω–∏–≤–∞–π —Å–µ–±—è —Å –¥—Ä—É–≥–∏–º–∏.** –¢—ã –Ω–µ –¥–æ–ª–∂–µ–Ω ¬´–≤—ã–≥–ª—è–¥–µ—Ç—å¬ª –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ, —á—Ç–æ–±—ã –±—ã—Ç—å –±–æ–ª—å–Ω—ã–º.\n\n"
        "2. **–ó–∞–ø–∏—à–∏, —á—Ç–æ –µ—à—å –∏ –∫–∞–∫ —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å.** –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Ä–∞–∑–æ—Ä–≤–∞—Ç—å —Ü–∏–∫–ª —Å—Ç—ã–¥–∞ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—è.\n\n"
        "3. **–û–±—Ä–∞—Ç–∏—Å—å –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É.** –†–ü–ü –ª–µ—á–∞—Ç—Å—è ‚Äî –Ω–æ –≤–∞–∂–Ω–æ –Ω–∞—á–∞—Ç—å –¥–æ —Å–µ—Ä—å—ë–∑–Ω—ã—Ö –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏–π.\n\n"
        "–¢—ã –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—à—å –∑–∞–±–æ—Ç—ã ‚Äî –¥–∞–∂–µ –µ—Å–ª–∏ —á—É–≤—Å—Ç–≤—É–µ—à—å, —á—Ç–æ ¬´–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–ª–æ—Ö¬ª."
    )
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìò –í–µ—Å—Ç–∏ –¥–Ω–µ–≤–Ω–∏–∫ (–°–ú–≠–†)", callback_data="help_me")],
        [InlineKeyboardButton(text="üìû –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –ø–æ –†–ü–ü", callback_data="contacts")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="cluster_4")]
    ])
    await msg_manager.safe_edit_or_send(bot, c.from_user.id, text, reply_markup=kb)


@dp.callback_query(F.data == "cluster_5")
async def cluster_5(c: types.CallbackQuery):
    text = (
        "ü´Ç *–ü–æ–ª–æ–≤–æ–µ –≤–æ—Å–ø–∏—Ç–∞–Ω–∏–µ*\n\n"
        "–í–æ–ø—Ä–æ—Å—ã –æ —Ç–µ–ª–µ, –º–µ–Ω—Å—Ç—Ä—É–∞—Ü–∏—è—Ö, —Å–µ–∫—Å—É–∞–ª—å–Ω–æ—Å—Ç–∏, –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö ‚Äî —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ.\n\n"
        "–¢—ã –∏–º–µ–µ—à—å –ø—Ä–∞–≤–æ –∑–Ω–∞—Ç—å, –∫–∞–∫ —É—Å—Ç—Ä–æ–µ–Ω —Ç–≤–æ–π –æ—Ä–≥–∞–Ω–∏–∑–º, –∫–∞–∫ –∑–∞—â–∏—â–∞—Ç—å —Å–µ–±—è –∏ —Å–≤–æ–∏ –≥—Ä–∞–Ω–∏—Ü—ã.\n\n"
        "–ù–∏–∫—Ç–æ –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –∑–∞—Å—Ç–∞–≤–ª—è—Ç—å —Ç–µ–±—è —Å—Ç—ã–¥–∏—Ç—å—Å—è —Å–≤–æ–µ–≥–æ —Ç–µ–ª–∞ –∏–ª–∏ —á—É–≤—Å—Ç–≤."
    )
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ö°Ô∏è –ü–µ—Ä–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è", callback_data="cluster_5_help")],
        [InlineKeyboardButton(text="üí¨ –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å (–ò–ò-–ø–æ–¥–¥–µ—Ä–∂–∫–∞)", callback_data="ai_support")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="navigator")]
    ])
    await msg_manager.safe_edit_or_send(bot, c.from_user.id, text, reply_markup=kb)

@dp.callback_query(F.data == "cluster_5_help")
async def cluster_5_help(c: types.CallbackQuery):
    text = (
        "üõ°Ô∏è *–ü–µ—Ä–≤–∞—è –ø–æ–º–æ—â—å: –ø–æ–ª–æ–≤–æ–µ –≤–æ—Å–ø–∏—Ç–∞–Ω–∏–µ*\n\n"
        "1. **–ó–Ω–∞–π —Å–≤–æ–∏ –≥—Ä–∞–Ω–∏—Ü—ã.** –¢—ã –≤–ø—Ä–∞–≤–µ —Å–∫–∞–∑–∞—Ç—å ¬´–Ω–µ—Ç¬ª ‚Äî –≤ –ª—é–±–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏, —Å –∫–µ–º —É–≥–æ–¥–Ω–æ.\n\n"
        "2. **–ï—Å–ª–∏ –±—ã–ª –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç ‚Äî —ç—Ç–æ –Ω–µ —Ç–≤–æ—è –≤–∏–Ω–∞.** –†–∞—Å—Å–∫–∞–∂–∏ –≤–∑—Ä–æ—Å–ª–æ–º—É, –∫–æ—Ç–æ—Ä–æ–º—É –¥–æ–≤–µ—Ä—è–µ—à—å.\n\n"
        "3. **–ò—Å–ø–æ–ª—å–∑—É–π –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏.** –ù–µ –≤–µ—Ä—å –≤—Å–µ–º—É –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ. –û–±—Ä–∞—â–∞–π—Å—è –∫ –≤—Ä–∞—á–∞–º, –ø–µ–¥–∞–≥–æ–≥–∞–º, –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã–º –ª–∏—Ü–∞–º.\n\n"
        "–¢—ã –∏–º–µ–µ—à—å –ø—Ä–∞–≤–æ –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ —É–≤–∞–∂–µ–Ω–∏–µ."
    )
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üÜò –¢—Ä–µ–≤–æ–∂–Ω–∞—è –∫–Ω–æ–ø–∫–∞", callback_data="sos")],
        [InlineKeyboardButton(text="üìû –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å", callback_data="contacts")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="cluster_5")]
    ])
    await msg_manager.safe_edit_or_send(bot, c.from_user.id, text, reply_markup=kb)


@dp.callback_query(F.data == "cluster_6")
async def cluster_6(c: types.CallbackQuery):
    text = (
        "üë• *–°–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤ –æ–±—â–µ–Ω–∏–∏*\n\n"
        "–ë—ã–≤–∞–µ—Ç —Ç—è–∂–µ–ª–æ –Ω–∞—Ö–æ–¥–∏—Ç—å –æ–±—â–∏–π —è–∑—ã–∫: —Å —Ä–æ–¥–∏—Ç–µ–ª—è–º–∏, –¥—Ä—É–∑—å—è–º–∏, –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö.\n\n"
        "–¢—ã –º–æ–∂–µ—à—å —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å –¥–∞–≤–ª–µ–Ω–∏–µ, –æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ, —Å—Ç—Ä–∞—Ö –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –∏–ª–∏ –ø–æ—Ç–µ—Ä—é —Å–µ–±—è.\n\n"
        "–≠—Ç–æ –Ω–µ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ —Ç—ã ¬´–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π¬ª. –ü—Ä–æ—Å—Ç–æ —Ç—ã –∏—â–µ—à—å —Å–≤–æ–π –ø—É—Ç—å –≤ –æ–±—â–µ–Ω–∏–∏."
    )
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ö°Ô∏è –ü–µ—Ä–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è", callback_data="cluster_6_help")],
        [InlineKeyboardButton(text="üí¨ –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å (–ò–ò-–ø–æ–¥–¥–µ—Ä–∂–∫–∞)", callback_data="ai_support")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="navigator")]
    ])
    await msg_manager.safe_edit_or_send(bot, c.from_user.id, text, reply_markup=kb)

@dp.callback_query(F.data == "cluster_6_help")
async def cluster_6_help(c: types.CallbackQuery):
    text = (
        "üó£Ô∏è *–ü–µ—Ä–≤–∞—è –ø–æ–º–æ—â—å –≤ –æ–±—â–µ–Ω–∏–∏*\n\n"
        "1. **–ì–æ–≤–æ—Ä–∏ –æ —Å–≤–æ–∏—Ö —á—É–≤—Å—Ç–≤–∞—Ö.** –ò—Å–ø–æ–ª—å–∑—É–π ¬´–Ø-–≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏—è¬ª: *¬´–ú–Ω–µ –±—ã–ª–æ –æ–±–∏–¥–Ω–æ, –∫–æ–≥–¥–∞‚Ä¶¬ª*, –∞ –Ω–µ *¬´–¢—ã –≤—Å–µ–≥–¥–∞‚Ä¶¬ª*.\n\n"
        "2. **–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π –≥—Ä–∞–Ω–∏—Ü—ã.** –¢—ã –≤–ø—Ä–∞–≤–µ –æ—Ç–¥—ã—Ö–∞—Ç—å –æ—Ç –æ–±—â–µ–Ω–∏—è, –≥–æ–≤–æ—Ä–∏—Ç—å ¬´–Ω–µ —Ö–æ—á—É¬ª, ¬´–Ω–µ –≥–æ—Ç–æ–≤¬ª.\n\n"
        "3. **–ï—Å–ª–∏ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö –±–æ–ª—å–Ω–æ ‚Äî –Ω–µ –º–æ–ª—á–∏.** –û—Å–æ–±–µ–Ω–Ω–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Ç—Ä–æ–ª—å, —É–≥—Ä–æ–∑—ã, —É–Ω–∏–∂–µ–Ω–∏—è.\n\n"
        "–¢—ã –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—à—å —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—è."
    )
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìò –°–æ–≤–µ—Ç—ã –ø–æ –æ–±—â–µ–Ω–∏—é", callback_data="help_me")],
        [InlineKeyboardButton(text="üí¨ –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å (–ò–ò-–ø–æ–¥–¥–µ—Ä–∂–∫–∞)", callback_data="ai_support")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="cluster_6")]
    ])
    await msg_manager.safe_edit_or_send(bot, c.from_user.id, text, reply_markup=kb)


# === –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ ===

@dp.callback_query(F.data == "ai_support")
async def ai_support(c: types.CallbackQuery):
    await log_action(c.from_user.id, "ai_support")
    text = (
        "üí¨ –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî —Ü–∏—Ñ—Ä–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫. –°–ø—Ä–∞—à–∏–≤–∞–π, —á—Ç–æ –≤–æ–ª–Ω—É–µ—Ç ‚Äî –ø–æ–º–æ–≥—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è.\n\n"
        "–ü–æ–∫–∞ —á—Ç–æ —è –Ω–µ –º–æ–≥—É –≤–µ—Å—Ç–∏ –¥–∏–∞–ª–æ–≥, –Ω–æ —Å–∫–æ—Ä–æ —ç—Ç–æ –ø–æ—è–≤–∏—Ç—Å—è.\n"
        "–ê –ø–æ–∫–∞ –º–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É ‚Äî –Ω–∞–∂–º–∏ ¬´‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å¬ª."
    )
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="question")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]
    ])
    await msg_manager.safe_edit_or_send(bot, c.from_user.id, text, reply_markup=kb)


@dp.callback_query(F.data == "contacts")
async def contacts(c: types.CallbackQuery):
    await log_action(c.from_user.id, "contacts")
    rows = await get_contacts()
    if not rows:
        text = "–ö–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö —á–µ—Ä–µ–∑ –ø–∞–Ω–µ–ª—å."
    else:
        text = "\n\n".join(
            f"*{category}*\n{name} ‚Äî `{phone}`\n_{description}_"
            for category, name, phone, description in rows
        )
    kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]])
    await msg_manager.safe_edit_or_send(bot, c.from_user.id, text, reply_markup=kb)


@dp.callback_query(F.data == "sos")
async def sos(c: types.CallbackQuery):
    await log_action(c.from_user.id, "sos")
    text = await get_sos()
    if not text.strip():
        text = (
            "üÜò *–¢—Ä–µ–≤–æ–∂–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞*\n\n"
            "–ï—Å–ª–∏ —Ç–µ–±–µ —É–≥—Ä–æ–∂–∞—é—Ç –∏–ª–∏ —Ç—ã –≤ –æ–ø–∞—Å–Ω–æ—Å—Ç–∏:\n"
            "‚Ä¢ [–ü–æ–∑–≤–æ–Ω–∏—Ç—å 112](tel:112) ‚Äî —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —Å–ª—É–∂–±—ã\n"
            "‚Ä¢ [–ü–æ–∑–≤–æ–Ω–∏—Ç—å 102](tel:102) ‚Äî –ø–æ–ª–∏—Ü–∏—è\n"
            "‚Ä¢ [–î–µ—Ç—Å–∫–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω –¥–æ–≤–µ—Ä–∏—è 8-800-2000-122](tel:88002000122) ‚Äî –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ –∏ –∞–Ω–æ–Ω–∏–º–Ω–æ\n\n"
            "–û—Å—Ç–∞–≤–∞–π—Å—è –Ω–∞ –ª–∏–Ω–∏–∏. –¢—ã –Ω–µ –æ–¥–∏–Ω."
        )
    kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]])
    await msg_manager.safe_edit_or_send(bot, c.from_user.id, text, reply_markup=kb, disable_web_page_preview=True)


@dp.message(F.text == "üö® –¢—Ä–µ–≤–æ–∂–Ω–∞—è –∫–Ω–æ–ø–∫–∞")
async def sos_direct(m: types.Message):
    await log_action(m.from_user.id, "sos_direct")
    text = await get_sos()
    if not text.strip():
        text = (
            "üÜò *–¢—Ä–µ–≤–æ–∂–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞*\n\n"
            "–ï—Å–ª–∏ —Ç–µ–±–µ —É–≥—Ä–æ–∂–∞—é—Ç –∏–ª–∏ —Ç—ã –≤ –æ–ø–∞—Å–Ω–æ—Å—Ç–∏:\n"
            "‚Ä¢ [–ü–æ–∑–≤–æ–Ω–∏—Ç—å 112](tel:112) ‚Äî —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —Å–ª—É–∂–±—ã\n"
            "‚Ä¢ [–ü–æ–∑–≤–æ–Ω–∏—Ç—å 102](tel:102) ‚Äî –ø–æ–ª–∏—Ü–∏—è\n"
            "‚Ä¢ [–î–µ—Ç—Å–∫–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω –¥–æ–≤–µ—Ä–∏—è 8-800-2000-122](tel:88002000122) ‚Äî –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ –∏ –∞–Ω–æ–Ω–∏–º–Ω–æ\n\n"
            "–û—Å—Ç–∞–≤–∞–π—Å—è –Ω–∞ –ª–∏–Ω–∏–∏. –¢—ã –Ω–µ –æ–¥–∏–Ω."
        )
    kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]])
    await msg_manager.safe_edit_or_send(bot, m.from_user.id, text, reply_markup=kb, disable_web_page_preview=True)


@dp.callback_query(F.data == "events")
async def events(c: types.CallbackQuery):
    rows = await get_events()
    if not rows:
        text = "–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π. –°–ª–µ–¥–∏ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!"
    else:
        text = "\n\n".join(
            f"*{title}* ({date})\n{description}\n[–ü–æ–¥—Ä–æ–±–Ω–µ–µ]({link})"
            for title, date, description, link in rows
        )
    kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]])
    await msg_manager.safe_edit_or_send(bot, c.from_user.id, text, reply_markup=kb, disable_web_page_preview=True)


@dp.callback_query(F.data == "question")
async def question(c: types.CallbackQuery, state: FSMContext):
    await log_action(c.from_user.id, "question")
    await msg_manager.safe_edit_or_send(
        bot, c.from_user.id,
        "–ù–∞–ø–∏—à–∏, —á—Ç–æ —Ç–µ–±—è –±–µ—Å–ø–æ–∫–æ–∏—Ç. –Ø –ø–µ—Ä–µ–¥–∞–º –≤–æ–ø—Ä–æ—Å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º.\n\n"
        "–¢—ã –º–æ–∂–µ—à—å –æ—Å—Ç–∞—Ç—å—Å—è –∞–Ω–æ–Ω–∏–º–Ω—ã–º ‚Äî —Ç–≤–æ—ë –∏–º—è –Ω–µ –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è."
    )
    await state.set_state(QuestionForm.question)


@dp.message(QuestionForm.question)
async def save_question_handler(m: types.Message, state: FSMContext):
    await add_chat_message(m.chat.id, "user", m.text)
    await save_question(m.from_user.id, m.text)
    response = (
        "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –¥–æ–≤–µ—Ä–∏–ª –º–Ω–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å.\n\n"
        "–Ø –ø–µ—Ä–µ–¥–∞–ª –µ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º. –ï—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è ‚Äî –æ–Ω–∏ —Å–≤—è–∂—É—Ç—Å—è —á–µ—Ä–µ–∑ —ç—Ç–æ–≥–æ –±–æ—Ç–∞.\n\n"
        "–¢—ã —Å–¥–µ–ª–∞–ª –≤–∞–∂–Ω—ã–π —à–∞–≥. –Ø —Ä—è–¥–æ–º."
    )
    await msg_manager.safe_edit_or_send(bot, m.from_user.id, response)
    await add_chat_message(m.chat.id, "ai", response)
    await state.clear()
    await show_main(m.from_user.id)


@dp.callback_query(F.data == "tip")
async def tip(c: types.CallbackQuery):
    text = await get_tip()
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –î—Ä—É–≥–æ–π —Å–æ–≤–µ—Ç", callback_data="tip")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]
    ])
    await msg_manager.safe_edit_or_send(
        bot, c.from_user.id,
        f"üí° *–°–æ–≤–µ—Ç –¥–Ω—è:*\n\n{text}\n\n–ü—É—Å—Ç—å –¥–µ–Ω—å –±—É–¥–µ—Ç —á—É—Ç—å –ª–µ–≥—á–µ.",
        reply_markup=kb
    )


@dp.callback_query(F.data == "sub")
async def sub(c: types.CallbackQuery):
    success = await toggle_subscription(c.from_user.id)
    if success:
        response = "üíö –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –æ—Å—Ç–∞—ë—à—å—Å—è –Ω–∞ —Å–≤—è–∑–∏! –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ —ç—Ç–æ –∂–µ –≤—Ä–µ–º—è —è –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ —Ç—ë–ø–ª—ã–π —Å–æ–≤–µ—Ç."
    else:
        response = "–•–æ—Ä–æ—à–æ, —è –Ω–µ –±—É–¥—É –±–µ—Å–ø–æ–∫–æ–∏—Ç—å. –ù–æ –ø–æ–º–Ω–∏ ‚Äî —Ç—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è. –Ø –∑–¥–µ—Å—å, –∫–æ–≥–¥–∞ –∑–∞—Ö–æ—á–µ—à—å."
    await c.answer(response, show_alert=True)
    await show_main(c.from_user.id)


@dp.callback_query(F.data == "back")
async def back(c: types.CallbackQuery):
    await log_action(c.from_user.id, "back_to_main")
    await show_main(c.from_user.id)


# === –ê–¥–º–∏–Ω–∫–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ) ===
@dp.callback_query(F.data == "admin")
async def admin(c: types.CallbackQuery, state: FSMContext):
    if c.from_user.id not in ADMIN_IDS:
        await c.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        return
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìí –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="ad_contacts")],
        [InlineKeyboardButton(text="üÜò SOS", callback_data="ad_sos")],
        [InlineKeyboardButton(text="üìÖ –°–æ–±—ã—Ç–∏–µ", callback_data="ad_event")],
        [InlineKeyboardButton(text="üìù –°—Ç–∞—Ç—å—è", callback_data="ad_article")],
        [InlineKeyboardButton(text="üí° –°–æ–≤–µ—Ç", callback_data="ad_tip")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]
    ])
    await msg_manager.safe_edit_or_send(bot, c.from_user.id, "üõ†Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: –≤—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª", reply_markup=kb)
    await state.set_state(AdminForm.section)


# === –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–≤–µ—Ç–æ–≤ ===
async def notifier():
    while True:
        await asyncio.sleep(60)
        user_ids = await get_due_subscribers()
        if not user_ids:
            continue
        tip_text = await get_tip()
        sent = []
        for user_id in user_ids:
            try:
                await bot.send_message(
                    user_id,
                    f"üí° –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:\n\n{tip_text}\n\n–¢—ã –Ω–µ –æ–¥–∏–Ω. –Ø —Ä—è–¥–æ–º."
                )
                sent.append(user_id)
            except Exception as e:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {user_id}: {e}")
        if sent:
            await reset_subscriptions(sent)


# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
async def main():
    await init_db()
    asyncio.create_task(notifier())  # –¢–µ–ø–µ—Ä—å notifier() –æ–±—ä—è–≤–ª–µ–Ω –≤—ã—à–µ
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())