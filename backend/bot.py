# bot.py
import os
import re
import asyncio
from datetime import timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton, \
  ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.dispatcher.middlewares.base import BaseMiddleware
from aiogram.client.default import DefaultBotProperties
from aiogram.exceptions import TelegramBadRequest

from db import (
  init_db, log_action, get_role, set_role, add_chat_message,
  get_articles, get_contacts, get_sos, get_events, get_tip, save_question,
  upsert_contact, upsert_sos, upsert_event, upsert_article, upsert_tip,
  get_due_subscribers, reset_subscriptions, toggle_subscription
)

# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
from dotenv import load_dotenv

dotenv_path = os.path.join(os.path.dirname(__file__), ".env")
if not os.path.exists(dotenv_path):
  print(f"‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {dotenv_path}")
  exit(1)

load_dotenv(dotenv_path)
print(f"‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑: {dotenv_path}")

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
WELCOME_TEXT = (
  "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî *–¶–∏—Ñ—Ä–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫* –¶–µ–Ω—Ç—Ä–∞ –º–æ–ª–æ–¥–µ–∂–Ω–æ–π –ø–æ–ª–∏—Ç–∏–∫–∏ –¢–æ–º—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏.\n\n"
  "–ó–¥–µ—Å—å —Ç—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å:\n"
  "üîπ –ù–∞–π—Ç–∏ –ø–æ–¥–¥–µ—Ä–∂–∫—É –≤ —Ç—Ä—É–¥–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏\n"
  "üîπ –£–∑–Ω–∞—Ç—å, –∫—É–¥–∞ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∑–∞ –ø–æ–º–æ—â—å—é\n"
  "üîπ –ü–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç –∏–ª–∏ —É—á–∞—Å—Ç–∏–µ –≤ —Å–æ–±—ã—Ç–∏—è—Ö\n\n"
  "üí¨ –í—Å—ë –∞–Ω–æ–Ω–∏–º–Ω–æ, –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏ —Å –∑–∞–±–æ—Ç–æ–π –æ —Ç–µ–±–µ.\n"
  "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±–µ —Å–µ–π—á–∞—Å –Ω—É–∂–Ω–æ:"
)

BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
  print("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞ –≤ .env")
  exit(1)

ADMIN_IDS = {int(x) for x in os.getenv("ADMIN_IDS", "123456789").split(',') if x.strip()}
PHONE_RX = re.compile(r"^\+7\(\d{3}\)\d{3}-\d{2}-\d{2}$")

bot = Bot(BOT_TOKEN, default=DefaultBotProperties(parse_mode="Markdown"))
dp = Dispatcher(storage=MemoryStorage())


# === Middleware: –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã ===
class ThrottlingMiddleware(BaseMiddleware):
  def __init__(self, rate_limit=10):
    self.rate_limit = rate_limit
    self.last_call = {}

  async def __call__(self, handler, event, data):
    user_id = event.from_user.id
    now = asyncio.get_event_loop().time()
    last = self.last_call.get(user_id, 0)
    if now - last < 1 / self.rate_limit:
      return
    self.last_call[user_id] = now
    return await handler(event, data)


dp.message.middleware(ThrottlingMiddleware())


# === FSM ===
class RoleForm(StatesGroup):
  role = State()


class QuestionForm(StatesGroup):
  question = State()


class AdminForm(StatesGroup):
  section = State()
  payload = State()


# === –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É) ===
def main_menu(user_id: int) -> InlineKeyboardMarkup:
  buttons = [
    # üî¥ –°—Ä–æ—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è ‚Äî –≤–≤–µ—Ä—Ö—É
    [InlineKeyboardButton(text="üÜò –¢—Ä–µ–≤–æ–∂–Ω–∞—è –∫–Ω–æ–ø–∫–∞", callback_data="sos")],
    [InlineKeyboardButton(text="üß≠ –ú–Ω–µ —Å—Ä–æ—á–Ω–æ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å", callback_data="navigator")],

    # üü° –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –∏ —Å–≤—è–∑—å
    [InlineKeyboardButton(text="üìû –ö—É–¥–∞ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è?", callback_data="contacts")],
    [InlineKeyboardButton(text="‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="question")],

    # üü¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ —É—á–∞—Å—Ç–∏–µ
    [InlineKeyboardButton(text="üìÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", callback_data="events")],
    [InlineKeyboardButton(text="üí° –ü–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç", callback_data="tip")],

    # üîî –ü–æ–¥–ø–∏—Å–∫–∞ ‚Äî –¥–µ–ª–∏–∫–∞—Ç–Ω–æ
    [InlineKeyboardButton(text="üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É", callback_data="sub")],

    # ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    [InlineKeyboardButton(text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å", callback_data="change_role")]
  ]
  if user_id in ADMIN_IDS:
    buttons.append([InlineKeyboardButton(text="üõ†Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin")])
  return InlineKeyboardMarkup(inline_keyboard=buttons)


# === –ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é ===
async def show_main(obj, edit=True, greeting=False):
  text = WELCOME_TEXT if greeting else "–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"
  markup = main_menu(obj.from_user.id)
  if edit:
    try:
      await obj.message.edit_text(text=text, reply_markup=markup)
    except TelegramBadRequest as e:
      if "message is not modified" in str(e):
        return
      raise
  else:
    await obj.answer(text=text, reply_markup=markup)


# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ===
@dp.message(Command("start"))
async def start(m: types.Message, state: FSMContext):
  await log_action(m.from_user.id, "start")
  role = await get_role(m.from_user.id)
  if not role:
    kb = ReplyKeyboardMarkup(
      keyboard=[[KeyboardButton(text="–Ø –ø–æ–¥—Ä–æ—Å—Ç–æ–∫"), KeyboardButton(text="–Ø —Ä–æ–¥–∏—Ç–µ–ª—å")]],
      resize_keyboard=True,
      one_time_keyboard=True
    )
    await m.answer(WELCOME_TEXT, reply_markup=kb)
    await state.set_state(RoleForm.role)
  else:
    await show_main(m, edit=False, greeting=True)


@dp.message(RoleForm.role)
async def choose_role(m: types.Message, state: FSMContext):
  role = "teen" if "–ø–æ–¥—Ä–æ—Å—Ç–æ–∫" in m.text.lower() else "parent"
  await set_role(m.from_user.id, role)
  await state.clear()
  await m.reply("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä. –Ø —É—á—Ç—É —ç—Ç–æ, —á—Ç–æ–±—ã –ª—É—á—à–µ –ø–æ–º–æ–≥–∞—Ç—å.", reply_markup=ReplyKeyboardRemove())
  await show_main(m, edit=False, greeting=True)


@dp.callback_query(F.data == "change_role")
async def change_role(c: types.CallbackQuery, state: FSMContext):
  await log_action(c.from_user.id, "change_role")
  await c.message.delete()
  kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–Ø –ø–æ–¥—Ä–æ—Å—Ç–æ–∫"), KeyboardButton(text="–Ø —Ä–æ–¥–∏—Ç–µ–ª—å")]],
    resize_keyboard=True,
    one_time_keyboard=True
  )
  await c.message.answer("–ö—Ç–æ —Ç—ã? –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ –ª—É—á—à–µ –ø–æ–º–æ–≥–∞—Ç—å —Ç–µ–±–µ.", reply_markup=kb)
  await state.set_state(RoleForm.role)


@dp.callback_query(F.data == "navigator")
async def nav(c: types.CallbackQuery):
  await log_action(c.from_user.id, "navigator")
  await add_chat_message(c.message.chat.id, "user", "navigator")

  kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üòü –ú–Ω–µ —Ç—Ä–µ–≤–æ–∂–Ω–æ, –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å", callback_data="help_me")],
    [InlineKeyboardButton(text="üö® –•–æ—á—É —Å–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ", callback_data="report")],
    [InlineKeyboardButton(text="üß† –ü—Ä–æ—Å—Ç–æ —Ö–æ—á—É –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å", callback_data="other")],
    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]
  ])
  await c.message.edit_text(
    "–í—ã–±–µ—Ä–∏, —á—Ç–æ —É —Ç–µ–±—è –Ω–∞ –¥—É—à–µ. –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –≤—ã—Å–ª—É—à–∞—Ç—å:",
    reply_markup=kb
  )


@dp.callback_query(F.data.in_({"help_me", "report", "other"}))
async def nav_sub(c: types.CallbackQuery):
  role = await get_role(c.from_user.id)
  rows = await get_articles(f"{c.data}_{role}")
  text = "\n\n".join(
    f"*{a}*\n{b}" for a, b in rows) if rows else "–ü–æ–∫–∞ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –Ω–æ —Ç—ã —É–∂–µ —Å–¥–µ–ª–∞–ª –≤–∞–∂–Ω—ã–π —à–∞–≥ ‚Äî –æ–±—Ä–∞—Ç–∏–ª—Å—è —Å—é–¥–∞."
  await add_chat_message(c.message.chat.id, "ai", text)
  await c.message.edit_text(
    text=text,
    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
      [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="navigator")]
    ])
  )


@dp.callback_query(F.data == "contacts")
async def contacts(c: types.CallbackQuery):
  await log_action(c.from_user.id, "contacts")
  await add_chat_message(c.message.chat.id, "user", "contacts")
  rows = await get_contacts()
  if not rows:
    text = "–ö–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö —á–µ—Ä–µ–∑ –ø–∞–Ω–µ–ª—å."
  else:
    text = "\n\n".join(
      f"*{category}*\n{name} ‚Äî `{phone}`\n_{description}_"
      for category, name, phone, description in rows
    )
  await add_chat_message(c.message.chat.id, "ai", "contacts_response")
  await c.message.edit_text(
    text=text,
    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
      [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]
    ])
  )


@dp.callback_query(F.data == "sos")
async def sos(c: types.CallbackQuery):
  await log_action(c.from_user.id, "sos")
  text = await get_sos()
  if not text.strip():
    text = (
      "üÜò *–¢—Ä–µ–≤–æ–∂–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞*\n\n"
      "–ï—Å–ª–∏ —Ç–µ–±–µ —É–≥—Ä–æ–∂–∞—é—Ç –∏–ª–∏ —Ç—ã –≤ –æ–ø–∞—Å–Ω–æ—Å—Ç–∏:\n"
      "‚Ä¢ [–ü–æ–∑–≤–æ–Ω–∏—Ç—å 112](tel:112) ‚Äî —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —Å–ª—É–∂–±—ã\n"
      "‚Ä¢ [–ü–æ–∑–≤–æ–Ω–∏—Ç—å 102](tel:102) ‚Äî –ø–æ–ª–∏—Ü–∏—è\n"
      "‚Ä¢ [–î–µ—Ç—Å–∫–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω –¥–æ–≤–µ—Ä–∏—è 8-800-2000-122](tel:88002000122) ‚Äî –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ –∏ –∞–Ω–æ–Ω–∏–º–Ω–æ\n\n"
      "–û—Å—Ç–∞–≤–∞–π—Å—è –Ω–∞ –ª–∏–Ω–∏–∏. –¢—ã –Ω–µ –æ–¥–∏–Ω."
    )
  await c.message.edit_text(
    text=text,
    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
      [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]
    ]),
    disable_web_page_preview=True
  )


@dp.callback_query(F.data == "events")
async def events(c: types.CallbackQuery):
  await log_action(c.from_user.id, "events")
  rows = await get_events()
  if not rows:
    text = "–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π. –°–ª–µ–¥–∏ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!"
  else:
    text = "\n\n".join(
      f"*{title}* ({date})\n{description}\n[–ü–æ–¥—Ä–æ–±–Ω–µ–µ]({link})"
      for title, date, description, link in rows
    )
  await c.message.edit_text(
    text=text,
    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
      [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]
    ]),
    disable_web_page_preview=True
  )


@dp.callback_query(F.data == "question")
async def question(c: types.CallbackQuery, state: FSMContext):
  await log_action(c.from_user.id, "question")
  await add_chat_message(c.message.chat.id, "user", "question")
  await c.message.edit_text(
    "–ù–∞–ø–∏—à–∏, —á—Ç–æ —Ç–µ–±—è –±–µ—Å–ø–æ–∫–æ–∏—Ç. –Ø –ø–µ—Ä–µ–¥–∞–º –≤–æ–ø—Ä–æ—Å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º.\n\n"
    "–¢—ã –º–æ–∂–µ—à—å –æ—Å—Ç–∞—Ç—å—Å—è –∞–Ω–æ–Ω–∏–º–Ω—ã–º ‚Äî —Ç–≤–æ—ë –∏–º—è –Ω–µ –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è."
  )
  await state.set_state(QuestionForm.question)


@dp.message(QuestionForm.question)
async def save_question_handler(m: types.Message, state: FSMContext):
  await add_chat_message(m.chat.id, "user", m.text)
  await save_question(m.from_user.id, m.text)
  response = (
    "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –¥–æ–≤–µ—Ä–∏–ª –º–Ω–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å.\n\n"
    "–Ø –ø–µ—Ä–µ–¥–∞–ª –µ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º. –ï—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è ‚Äî –æ–Ω–∏ —Å–≤—è–∂—É—Ç—Å—è —á–µ—Ä–µ–∑ —ç—Ç–æ–≥–æ –±–æ—Ç–∞.\n\n"
    "–¢—ã —Å–¥–µ–ª–∞–ª –≤–∞–∂–Ω—ã–π —à–∞–≥. –Ø —Ä—è–¥–æ–º."
  )
  await m.answer(response)
  await add_chat_message(m.chat.id, "ai", response)
  await state.clear()
  await show_main(m, edit=False)


@dp.callback_query(F.data == "tip")
async def tip(c: types.CallbackQuery):
  await log_action(c.from_user.id, "tip")
  text = await get_tip()
  await c.message.edit_text(
    f"üí° *–°–æ–≤–µ—Ç –¥–Ω—è:*\n\n{text}\n\n–ü—É—Å—Ç—å –¥–µ–Ω—å –±—É–¥–µ—Ç —á—É—Ç—å –ª–µ–≥—á–µ.",
    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
      [InlineKeyboardButton(text="üîÑ –î—Ä—É–≥–æ–π —Å–æ–≤–µ—Ç", callback_data="tip")],
      [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]
    ])
  )


@dp.callback_query(F.data == "poll")
async def poll(c: types.CallbackQuery):
  await log_action(c.from_user.id, "poll")
  await c.message.edit_text(
    "–ü–æ–∫–∞ –æ–ø—Ä–æ—Å–æ–≤ –Ω–µ—Ç, –Ω–æ —Å–∫–æ—Ä–æ –ø–æ—è–≤—è—Ç—Å—è.\n\n"
    "–•–æ—á–µ—à—å, —á—Ç–æ–±—ã —è —É–≤–µ–¥–æ–º–∏–ª, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –æ–ø—Ä–æ—Å?",
    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
      [InlineKeyboardButton(text="üîî –£–≤–µ–¥–æ–º–∏—Ç—å", callback_data="sub")],
      [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]
    ])
  )


@dp.callback_query(F.data == "sub")
async def sub(c: types.CallbackQuery):
  success = await toggle_subscription(c.from_user.id)
  if success:
    response = (
      "üíö –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –æ—Å—Ç–∞—ë—à—å—Å—è –Ω–∞ —Å–≤—è–∑–∏!\n"
      "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ —ç—Ç–æ –∂–µ –≤—Ä–µ–º—è —è –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ —Ç—ë–ø–ª—ã–π —Å–æ–≤–µ—Ç –∏–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ."
    )
  else:
    response = (
      "–•–æ—Ä–æ—à–æ, —è –Ω–µ –±—É–¥—É –±–µ—Å–ø–æ–∫–æ–∏—Ç—å.\n"
      "–ù–æ –ø–æ–º–Ω–∏ ‚Äî —Ç—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è. –Ø –∑–¥–µ—Å—å, –∫–æ–≥–¥–∞ –∑–∞—Ö–æ—á–µ—à—å."
    )
  await c.answer(response, show_alert=True)
  await show_main(c, edit=False)


@dp.callback_query(F.data == "admin")
async def admin(c: types.CallbackQuery, state: FSMContext):
  if c.from_user.id not in ADMIN_IDS:
    await c.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
    return
  await log_action(c.from_user.id, "admin")
  kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üìí –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="ad_contacts")],
    [InlineKeyboardButton(text="üÜò SOS", callback_data="ad_sos")],
    [InlineKeyboardButton(text="üìÖ –°–æ–±—ã—Ç–∏–µ", callback_data="ad_event")],
    [InlineKeyboardButton(text="üìù –°—Ç–∞—Ç—å—è", callback_data="ad_article")],
    [InlineKeyboardButton(text="üí° –°–æ–≤–µ—Ç", callback_data="ad_tip")],
    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]
  ])
  await c.message.edit_text("üõ†Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: –≤—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª", reply_markup=kb)
  await state.set_state(AdminForm.section)


@dp.callback_query(F.data.startswith("ad_"))
async def admin_pick(c: types.CallbackQuery, state: FSMContext):
  if c.from_user.id not in ADMIN_IDS:
    await c.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
    return
  messages = {
    "ad_contacts": "–§–æ—Ä–º–∞—Ç: category|name|+7(XXX)XXX-XX-XX|description",
    "ad_sos": "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ç—Ä–µ–≤–æ–∂–Ω–æ–π –∫–Ω–æ–ø–∫–∏:",
    "ad_event": "title|YYYY-MM-DD|description|link",
    "ad_article": "category|title|content",
    "ad_tip": "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–≤–µ—Ç–∞:"
  }
  msg = messages.get(c.data)
  if not msg:
    await c.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
    return
  await c.message.edit_text(msg)
  await state.update_data(section=c.data)
  await state.set_state(AdminForm.payload)


@dp.message(AdminForm.payload)
async def admin_save(m: types.Message, state: FSMContext):
  if m.from_user.id not in ADMIN_IDS:
    await m.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
    return
  data = await state.get_data()
  section, parts = data["section"], [x.strip() for x in m.text.split('|')]
  try:
    if section == "ad_contacts" and len(parts) == 4 and PHONE_RX.fullmatch(parts[2]):
      await upsert_contact(*parts)
    elif section == "ad_sos":
      await upsert_sos(m.text)
    elif section == "ad_event" and len(parts) == 4:
      await upsert_event(*parts)
    elif section == "ad_article" and len(parts) == 3:
      await upsert_article(*parts)
    elif section == "ad_tip":
      await upsert_tip(m.text)
    else:
      await m.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
      return
    await m.answer("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
    await show_main(m, edit=False)
  finally:
    await state.clear()


@dp.callback_query(F.data == "back")
async def back(c: types.CallbackQuery):
  await show_main(c, edit=True)


# === –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–≤–µ—Ç–æ–≤ ===
async def notifier():
  while True:
    await asyncio.sleep(60)
    user_ids = await get_due_subscribers()
    if not user_ids:
      continue
    tip_text = await get_tip()
    sent = []
    for user_id in user_ids:
      try:
        await bot.send_message(
          user_id,
          f"üí° –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:\n\n{tip_text}\n\n–¢—ã –Ω–µ –æ–¥–∏–Ω. –Ø —Ä—è–¥–æ–º."
        )
        sent.append(user_id)
      except Exception:
        pass
    if sent:
      await reset_subscriptions(sent)


# === –ó–∞–ø—É—Å–∫ ===
async def main():
  await init_db()
  asyncio.create_task(notifier())
  print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
  await dp.start_polling(bot)


if __name__ == "__main__":
  asyncio.run(main())
