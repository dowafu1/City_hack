# bot.py
import os
import re
import asyncio
from datetime import timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.dispatcher.middlewares.base import BaseMiddleware
from aiogram.client.default import DefaultBotProperties
from aiogram.exceptions import TelegramBadRequest

from db import (
    init_db, log_action, get_role, set_role, add_chat_message, get_chat_history,
    get_articles, get_contacts, get_sos, get_events, get_tip, save_question,
    upsert_contact, upsert_sos, upsert_event, upsert_article, upsert_tip,
    get_due_subscribers, reset_subscriptions, toggle_subscription
)

from dotenv import load_dotenv

load_dotenv()

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
WELCOME_TEXT = (
    "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –±–æ—Ç *–¶–µ–Ω—Ç—Ä–∞ –º–æ–ª–æ–¥–µ–∂–Ω–æ–π –ø–æ–ª–∏—Ç–∏–∫–∏ –¢–æ–º—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏*.\n\n"
    "üîπ –ü–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã —Å–ª—É–∂–±\n"
    "üîπ –î–∞–º —Å–æ–≤–µ—Ç—ã –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏\n"
    "üîπ –†–∞—Å—Å–∫–∞–∂—É –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö\n\n"
    "‚ú® –í—Å—ë –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –∏ –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Ñ–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç–µ–π!"
)

BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_IDS = {int(x) for x in os.getenv("ADMIN_IDS", "123456789").split(',') if x.strip()}
PHONE_RX = re.compile(r"^\+7\(\d{3}\)\d{3}-\d{2}-\d{2}$")

bot = Bot(BOT_TOKEN, default=DefaultBotProperties(parse_mode="Markdown"))
dp = Dispatcher(storage=MemoryStorage())


# === Middleware ===
class ThrottlingMiddleware(BaseMiddleware):
    def __init__(self, rate_limit=10):
        self.rate_limit = rate_limit
        self.last_call = {}

    async def __call__(self, handler, event, data):
        user_id = event.from_user.id
        now = asyncio.get_event_loop().time()
        last = self.last_call.get(user_id, 0)
        if now - last < 1 / self.rate_limit:
            return
        self.last_call[user_id] = now
        return await handler(event, data)


dp.message.middleware(ThrottlingMiddleware())


# === FSM ===
class RoleForm(StatesGroup):
    role = State()


class QuestionForm(StatesGroup):
    question = State()


class AdminForm(StatesGroup):
    section = State()
    payload = State()


# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ===
def main_menu(user_id: int) -> InlineKeyboardMarkup:
    buttons = [
        [InlineKeyboardButton(text="üß≠ –ù–∞–≤–∏–≥–∞—Ç–æ—Ä –ø–æ–º–æ—â–∏", callback_data="navigator")],
        [InlineKeyboardButton(text="üìû –ö—É–¥–∞ –æ–±—Ä–∞—â–∞—Ç—å—Å—è?", callback_data="contacts")],
        [InlineKeyboardButton(text="üÜò –¢—Ä–µ–≤–æ–∂–Ω–∞—è –∫–Ω–æ–ø–∫–∞", callback_data="sos")],
        [InlineKeyboardButton(text="üìÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", callback_data="events")],
        [InlineKeyboardButton(text="‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="question")],
        [InlineKeyboardButton(text="üí° –°–æ–≤–µ—Ç –¥–Ω—è", callback_data="tip")],
        [InlineKeyboardButton(text="üìä –û–ø—Ä–æ—Å", callback_data="poll")],
        [InlineKeyboardButton(text="üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–æ–≤–µ—Ç—ã", callback_data="sub")],
        [InlineKeyboardButton(text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å", callback_data="change_role")]
    ]
    if user_id in ADMIN_IDS:
        buttons.append([InlineKeyboardButton(text="‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)


async def show_main(obj, edit=True, greeting=False):
    text = WELCOME_TEXT + "\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:" if greeting else "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:"
    markup = main_menu(obj.from_user.id)
    if edit:
        try:
            await obj.message.edit_text(text=text, reply_markup=markup)
        except TelegramBadRequest as e:
            if "message is not modified" in str(e):
                return
            raise
    else:
        await obj.answer(text=text, reply_markup=markup)


# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ===
@dp.message(Command("start"))
async def start(m: types.Message, state: FSMContext):
    await log_action(m.from_user.id, "start")
    role = await get_role(m.from_user.id)
    if not role:
        kb = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–Ø –ø–æ–¥—Ä–æ—Å—Ç–æ–∫"), KeyboardButton(text="–Ø —Ä–æ–¥–∏—Ç–µ–ª—å")]], resize_keyboard=True)
        await m.answer(WELCOME_TEXT + "\n\n–í—ã–±–µ—Ä–∏ —Ä–æ–ª—å:", reply_markup=kb)
        await state.set_state(RoleForm.role)
    else:
        await show_main(m, edit=False, greeting=True)


@dp.message(RoleForm.role)
async def choose_role(m: types.Message, state: FSMContext):
    role = "teen" if "–ø–æ–¥—Ä–æ—Å—Ç–æ–∫" in m.text.lower() else "parent"
    await set_role(m.from_user.id, role)
    await state.clear()
    await m.reply("–†–æ–ª—å –≤—ã–±—Ä–∞–Ω–∞.", reply_markup=ReplyKeyboardRemove())
    await show_main(m, edit=False)


@dp.callback_query(F.data == "change_role")
async def change_role(c: types.CallbackQuery, state: FSMContext):
    await log_action(c.from_user.id, "change_role")
    await c.message.delete()
    kb = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–Ø –ø–æ–¥—Ä–æ—Å—Ç–æ–∫"), KeyboardButton(text="–Ø —Ä–æ–¥–∏—Ç–µ–ª—å")]], resize_keyboard=True)
    await c.message.answer("–í—ã–±–µ—Ä–∏ —Ä–æ–ª—å:", reply_markup=kb)
    await state.set_state(RoleForm.role)


@dp.callback_query(F.data == "navigator")
async def nav(c: types.CallbackQuery):
    await log_action(c.from_user.id, "navigator")
    await add_chat_message(c.message.chat.id, "user", "navigator")
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üòü –ú–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å", callback_data="help_me")],
        [InlineKeyboardButton(text="üö® –•–æ—á—É —Å–æ–æ–±—â–∏—Ç—å –æ...", callback_data="report")],
        [InlineKeyboardButton(text="‚ùì –î—Ä—É–≥–æ–µ", callback_data="other")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]
    ])
    await c.message.edit_text("–ù–∞–≤–∏–≥–∞—Ç–æ—Ä –ø–æ–º–æ—â–∏:", reply_markup=kb)


@dp.callback_query(F.data.in_({"help_me", "report", "other"}))
async def nav_sub(c: types.CallbackQuery):
    role = await get_role(c.from_user.id)
    rows = await get_articles(f"{c.data}_{role}")
    text = "\n".join(f"{a}: {b}" for a, b in rows) or "–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ üòî"
    await add_chat_message(c.message.chat.id, "ai", text)
    await c.message.edit_text(
        text=text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="navigator")]])
    )


@dp.callback_query(F.data == "contacts")
async def contacts(c: types.CallbackQuery):
    await log_action(c.from_user.id, "contacts")
    await add_chat_message(c.message.chat.id, "user", "contacts")
    rows = await get_contacts()
    text = "\n".join(f"{a}: {b} ‚Äî {p} ({d})" for a, b, p, d in rows) or "–ù–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ üòî"
    await add_chat_message(c.message.chat.id, "ai", text)
    await c.message.edit_text(
        text=text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]])
    )


@dp.callback_query(F.data == "sos")
async def sos(c: types.CallbackQuery):
    await log_action(c.from_user.id, "sos")
    text = await get_sos()
    await c.message.edit_text(
        text=text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]])
    )


@dp.callback_query(F.data == "events")
async def events(c: types.CallbackQuery):
    await log_action(c.from_user.id, "events")
    rows = await get_events()
    text = "\n".join(f"{a} ({d}): {b} ‚Äî {l}" for a, d, b, l in rows) or "–ù–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π üìÖ"
    await c.message.edit_text(
        text=text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]])
    )


@dp.callback_query(F.data == "question")
async def question(c: types.CallbackQuery, state: FSMContext):
    await log_action(c.from_user.id, "question")
    await add_chat_message(c.message.chat.id, "user", "question")
    await c.message.edit_text("–ù–∞–ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å ‚ùì")
    await state.set_state(QuestionForm.question)


@dp.message(QuestionForm.question)
async def save_question_handler(m: types.Message, state: FSMContext):
    await add_chat_message(m.chat.id, "user", m.text)
    await save_question(m.from_user.id, m.text)
    response = "–í–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω üöÄ"
    await m.answer(response)
    await add_chat_message(m.chat.id, "ai", response)
    await state.clear()
    await show_main(m, edit=False)


@dp.callback_query(F.data == "tip")
async def tip(c: types.CallbackQuery):
    await log_action(c.from_user.id, "tip")
    text = await get_tip()
    await c.message.edit_text(
        text=text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]])
    )


@dp.callback_query(F.data == "poll")
async def poll(c: types.CallbackQuery):
    await log_action(c.from_user.id, "poll")
    await c.message.edit_text(
        "–ü–æ–∫–∞ –æ–ø—Ä–æ—Å–æ–≤ –Ω–µ—Ç—É üìä",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]])
    )


@dp.callback_query(F.data == "sub")
async def sub(c: types.CallbackQuery):
    success = await toggle_subscription(c.from_user.id)
    await c.answer("–ë—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Å–æ–≤–µ—Ç—ã —Ä–∞–∑ –≤ –¥–µ–Ω—å" if success else "–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞")
    await show_main(c, edit=False)


@dp.callback_query(F.data == "admin")
async def admin(c: types.CallbackQuery, state: FSMContext):
    if c.from_user.id not in ADMIN_IDS:
        await c.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        return
    await log_action(c.from_user.id, "admin")
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìí –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="ad_contacts")],
        [InlineKeyboardButton(text="üÜò SOS", callback_data="ad_sos")],
        [InlineKeyboardButton(text="üìÖ –°–æ–±—ã—Ç–∏–µ", callback_data="ad_event")],
        [InlineKeyboardButton(text="üìù –°—Ç–∞—Ç—å—è", callback_data="ad_article")],
        [InlineKeyboardButton(text="üí° –°–æ–≤–µ—Ç", callback_data="ad_tip")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]
    ])
    await c.message.edit_text("–ê–¥–º–∏–Ω: –≤—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª", reply_markup=kb)
    await state.set_state(AdminForm.section)


@dp.callback_query(F.data.startswith("ad_"))
async def admin_pick(c: types.CallbackQuery, state: FSMContext):
    if c.from_user.id not in ADMIN_IDS:
        await c.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        return
    messages = {
        "ad_contacts": "–§–æ—Ä–º–∞—Ç: category|name|+7(XXX)XXX-XX-XX|description",
        "ad_sos": "–¢–µ–∫—Å—Ç SOS",
        "ad_event": "title|YYYY-MM-DD|description|link",
        "ad_article": "category|title|content",
        "ad_tip": "–¢–µ–∫—Å—Ç —Å–æ–≤–µ—Ç–∞"
    }
    msg = messages.get(c.data)
    if not msg:
        await c.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
        return
    await c.message.edit_text(msg)
    await state.update_data(section=c.data)
    await state.set_state(AdminForm.payload)


@dp.message(AdminForm.payload)
async def admin_save(m: types.Message, state: FSMContext):
    if m.from_user.id not in ADMIN_IDS:
        await m.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return
    data = await state.get_data()
    section, parts = data["section"], [x.strip() for x in m.text.split('|')]
    try:
        if section == "ad_contacts" and len(parts) == 4 and PHONE_RX.fullmatch(parts[2]):
            await upsert_contact(*parts)
        elif section == "ad_sos":
            await upsert_sos(m.text)
        elif section == "ad_event" and len(parts) == 4:
            await upsert_event(*parts)
        elif section == "ad_article" and len(parts) == 3:
            await upsert_article(*parts)
        elif section == "ad_tip":
            await upsert_tip(m.text)
        else:
            await m.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
            return
        await m.answer("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
        await show_main(m, edit=False)
    finally:
        await state.clear()


@dp.callback_query(F.data == "back")
async def back(c: types.CallbackQuery):
    await show_main(c)


# === –†–∞—Å—Å—ã–ª–∫–∞ ===
async def notifier():
    while True:
        await asyncio.sleep(60)
        user_ids = await get_due_subscribers()
        if not user_ids:
            continue
        tip_text = await get_tip()
        sent = []
        for user_id in user_ids:
            try:
                await bot.send_message(user_id, tip_text)
                sent.append(user_id)
            except Exception:
                pass
        if sent:
            await reset_subscriptions(sent)


# === –ó–∞–ø—É—Å–∫ ===
async def main():
    await init_db()
    asyncio.create_task(notifier())
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())